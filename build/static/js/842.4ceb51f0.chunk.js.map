{"version":3,"file":"static/js/842.4ceb51f0.chunk.js","mappings":"6NAyHA,UArHY,WAAO,IAAD,IAChB,GAAoCA,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAA8CF,EAAAA,EAAAA,UAAS,IAAvD,eAAOG,EAAP,KAAwBC,EAAxB,KAEMC,EAAe,CACnBC,SAAU,SAACH,GACTC,EAAmBD,EACpB,GAeH,GAAsCH,EAAAA,EAAAA,UACpCO,aAAaC,QAAQ,OAAS,IADhC,eAAOC,EAAP,KAAoBC,EAApB,KAIMC,EAAc,+CAAG,+GAEbC,EAAY,CAAEC,QAASJ,GAFV,SAGIK,EAAAA,GAAIC,KAAK,2BAA4BH,GAHzC,QAGbI,EAHa,QAKNC,MAAQC,MAAMC,QAAQH,EAASC,KAAKA,OACzCG,EAAgBJ,EAASC,KAAKA,KAAKI,KAAI,SAACC,GAAD,MAAW,CACtDC,cAAeD,EAAKC,cACpBC,WAAYF,EAAKE,WACjBC,YAAaH,EAAKG,YAClBC,IAAKJ,EAAKC,cAJiC,IAQvCI,EAAeP,EAClBQ,QAAO,SAACN,GAAD,OAA+B,IAArBA,EAAKG,WAAf,IACPJ,KAAI,SAACC,GAAD,OAAUA,EAAKC,aAAf,IAEPnB,EAAmBuB,GACnBzB,EAAckB,IAEdS,QAAQC,MAAM,kCArBG,gDAwBnBD,QAAQC,MAAM,wBAAd,MAxBmB,0DAAH,uBA4BdC,EAAc,gDAAG,WAAO5B,GAAP,4FAEbS,EAAY,CAChBC,QAASJ,EACTc,cAAepB,GAJE,SAMIW,EAAAA,GAAIC,KAAK,4BAA6BH,GAN1C,cAvCGoB,EA+CpB,UA/C0BC,EAgD1B,QAhDmCC,EAiDnC,4CAhDJC,EAAAA,EAAaH,GAAM,CACjBC,QAAAA,EACAC,YAAAA,IAgDAvB,IAZmB,gDAcnBkB,QAAQC,MAAM,wBAAd,MAdmB,kCAvCE,IAACE,EAAMC,EAASC,CAuClB,wBAAH,uBAkBdE,EAAe,CACnB,CACEC,MAAO,OACPC,UAAW,gBACXZ,IAAK,iBAEP,CACEW,MAAO,SACPC,UAAW,aACXZ,IAAK,iBAEP,CACEW,MAAO,SACPC,UAAW,cACXC,OAAQ,SAACd,GAAD,OACN,kBAAOO,KAAK,WAAWQ,QAAyB,IAAhBf,GAD1B,IAWZ,OALAgB,EAAAA,EAAAA,YAAU,WACR/B,EAAeH,aAAaC,QAAQ,OAAS,IAC7CG,GACD,GAAE,KAGD,UAAC,IAAD,CAAM0B,MAAM,sBAAZ,WACE,SAAC,KAAD,CAAQK,QAzFI,WACdb,QAAQc,IAAIxC,GACZ4B,EAAe5B,EAChB,EAsFG,SAA0B,YAC1B,SAAC,IAAD,CACEyC,KAAK,QACLC,UAAQ,EACRC,QAASV,EACTW,WAAY9C,EACZ+C,OAAO,MACP3C,cAAY,QACVF,gBAAiBA,EACjB6B,KAAM,WACNiB,yBAAyB,GACtB5C,OAKZ,C","sources":["views/app-views/notifications/index.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Card, Table, Button, notification } from \"antd\";\r\nimport api from \"configs/apiConfig\";\r\n\r\nconst App = () => {\r\n  const [alerttypes, setAlertTypes] = useState([]);\r\n  const [selectedRowKeys, setSelectedRowKeys] = useState([]);\r\n\r\n  const rowSelection = {\r\n    onChange: (selectedRowKeys) => {\r\n      setSelectedRowKeys(selectedRowKeys);\r\n    },\r\n  };\r\n\r\n  const GetData = () => {\r\n    console.log(selectedRowKeys);\r\n    SaveAlertTypes(selectedRowKeys);\r\n  };\r\n\r\n  const openNotification = (type, message, description) => {\r\n    notification[type]({\r\n      message,\r\n      description,\r\n    });\r\n  };\r\n\r\n  const [currentUser, setCurrentUser] = useState(\r\n    localStorage.getItem(\"id\") || \"\"\r\n  );\r\n\r\n  const loadAlertTypes = async () => {\r\n    try {\r\n      const user_data = { user_id: currentUser };\r\n      const response = await api.post(\"alert_notifications_list\", user_data);\r\n\r\n      if (response.data && Array.isArray(response.data.data)) {\r\n        const processedData = response.data.data.map((item) => ({\r\n          alert_type_id: item.alert_type_id,\r\n          alert_type: item.alert_type,\r\n          user_status: item.user_status,\r\n          key: item.alert_type_id,\r\n        }));\r\n\r\n        // Create an array of alert_type_ids where user_status is 1\r\n        const selectedKeys = processedData\r\n          .filter((item) => item.user_status === 1)\r\n          .map((item) => item.alert_type_id);\r\n\r\n        setSelectedRowKeys(selectedKeys); // Set selectedRowKeys\r\n        setAlertTypes(processedData);\r\n      } else {\r\n        console.error(\"API request was not successful\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching users:\", error);\r\n    }\r\n  };\r\n\r\n  const SaveAlertTypes = async (selectedRowKeys) => {\r\n    try {\r\n      const user_data = {\r\n        user_id: currentUser,\r\n        alert_type_id: selectedRowKeys,\r\n      };\r\n      const response = await api.post(\"alert_notification/update\", user_data);\r\n      openNotification(\r\n        \"success\",\r\n        \"Alert\",\r\n        \"Alert Configuration Updated Successfully!\"\r\n      );\r\n      loadAlertTypes();\r\n    } catch (error) {\r\n      console.error(\"Error fetching users:\", error);\r\n    }\r\n  };\r\n\r\n  const tableColumns = [\r\n    {\r\n      title: \"Name\",\r\n      dataIndex: \"alert_type_id\",\r\n      key: \"alert_type_id\",\r\n    },\r\n    {\r\n      title: \"Mobile\",\r\n      dataIndex: \"alert_type\",\r\n      key: \"alert_type_id\",\r\n    },\r\n    {\r\n      title: \"Status\",\r\n      dataIndex: \"user_status\",\r\n      render: (user_status) => (\r\n        <input type=\"checkbox\" checked={user_status === 1} />\r\n      ),\r\n    },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    setCurrentUser(localStorage.getItem(\"id\") || \"\");\r\n    loadAlertTypes();\r\n  }, []);\r\n\r\n  return (\r\n    <Card title=\"Alert Configuration\">\r\n      <Button onClick={GetData}>Update</Button>\r\n      <Table\r\n        size=\"small\"\r\n        bordered\r\n        columns={tableColumns}\r\n        dataSource={alerttypes}\r\n        rowKey=\"key\"\r\n        rowSelection={{\r\n          selectedRowKeys: selectedRowKeys,\r\n          type: \"checkbox\",\r\n          preserveSelectedRowKeys: false,\r\n          ...rowSelection,\r\n        }}\r\n      />\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"names":["useState","alerttypes","setAlertTypes","selectedRowKeys","setSelectedRowKeys","rowSelection","onChange","localStorage","getItem","currentUser","setCurrentUser","loadAlertTypes","user_data","user_id","api","post","response","data","Array","isArray","processedData","map","item","alert_type_id","alert_type","user_status","key","selectedKeys","filter","console","error","SaveAlertTypes","type","message","description","notification","tableColumns","title","dataIndex","render","checked","useEffect","onClick","log","size","bordered","columns","dataSource","rowKey","preserveSelectedRowKeys"],"sourceRoot":""}