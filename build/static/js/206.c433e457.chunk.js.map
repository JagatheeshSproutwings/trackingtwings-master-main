{"version":3,"file":"static/js/206.c433e457.chunk.js","mappings":"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","sources":["components/shared-components/Flex/index.js","utils/index.js","views/app-views/stock_management/demo/index.js","views/app-views/stock_management/sim/create.js","views/app-views/stock_management/sim/edit.js","views/app-views/stock_management/sim/index.js"],"sourcesContent":["import styled from '@emotion/styled';\r\n\r\nconst Flex = styled.div(({justifyContent, alignItems, flexDirection, gap, padding, margin}) => {\r\n\r\n\tconst baseStyle = {\r\n\t\tdisplay: 'flex',\r\n\t\tjustifyContent: justifyContent,\r\n\t\talignItems: alignItems,\r\n\t\tgap: typeof gap === 'number' ? `${gap}px` : gap,\r\n\t}\r\n\r\n\tif (flexDirection) {\r\n\t\tbaseStyle.flexDirection = flexDirection\r\n\t}\r\n\r\n\tif (padding) {\r\n\t\tbaseStyle.padding = padding\r\n\t}\r\n\r\n\tif (margin) {\r\n\t\tbaseStyle.margin = margin\r\n\t}\r\n\r\n\treturn {...baseStyle}\r\n})\r\n\r\nexport default Flex\r\n","class Utils {\r\n\r\n\t/**\r\n\t * Get first character from first & last sentences of a username\r\n\t * @param {String} name - Username\r\n\t * @return {String} 2 characters string\r\n\t */\r\n\tstatic getNameInitial(name) {\r\n\t\tlet initials = name.match(/\\b\\w/g) || [];\r\n\t\treturn ((initials.shift() || '') + (initials.pop() || '')).toUpperCase();\r\n\t}\r\n\r\n\t/**\r\n\t * Get current path related object from Navigation Tree\r\n\t * @param {Array} navTree - Navigation Tree from directory 'configs/NavigationConfig'\r\n\t * @param {String} path - Location path you looking for e.g '/app/dashboards/analytic'\r\n\t * @return {Object} object that contained the path string\r\n\t */\r\n\tstatic getRouteInfo(navTree, path) {\r\n\t\tif( navTree.path === path ){\r\n\t\t  \treturn navTree;\r\n\t\t}\r\n\t\tlet route; \r\n\t\tfor (let p in navTree) {\r\n\t\t\tif( navTree.hasOwnProperty(p) && typeof navTree[p] === 'object' ) {\r\n\t\t\t\troute = this.getRouteInfo(navTree[p], path);\r\n\t\t\t\tif(route){\r\n\t\t\t\t\treturn route;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn route;\r\n\t}\t\r\n\r\n\t/**\r\n\t * Get accessible color contrast\r\n\t * @param {String} hex - Hex color code e.g '#3e82f7'\r\n\t * @return {String} 'dark' or 'light'\r\n\t */\r\n\tstatic getColorContrast(hex){\r\n\t\tif(!hex) {\r\n\t\t\treturn 'dark'\r\n\t\t}\r\n\t\tconst threshold = 130;\r\n\t\tconst hRed = hexToR(hex);\r\n\t\tconst hGreen = hexToG(hex);\r\n\t\tconst hBlue = hexToB(hex);\r\n\t\tfunction hexToR(h) {return parseInt((cutHex(h)).substring(0,2),16)}\r\n\t\tfunction hexToG(h) {return parseInt((cutHex(h)).substring(2,4),16)}\r\n\t\tfunction hexToB(h) {return parseInt((cutHex(h)).substring(4,6),16)}\r\n\t\tfunction cutHex(h) {return (h.charAt(0) === '#') ? h.substring(1,7):h}\r\n\t\tconst cBrightness = ((hRed * 299) + (hGreen * 587) + (hBlue * 114)) / 1000;\r\n\t\tif (cBrightness > threshold){\r\n\t\t\treturn 'dark'\r\n\t\t} else { \r\n\t\t\treturn 'light'\r\n\t\t}\t\r\n\t}\r\n\r\n\t/**\r\n\t * Darken or lighten a hex color \r\n\t * @param {String} color - Hex color code e.g '#3e82f7'\r\n\t * @param {Number} percent - Percentage -100 to 100, positive for lighten, negative for darken\r\n\t * @return {String} Darken or lighten color \r\n\t */\r\n\tstatic shadeColor(color, percent) {\r\n\t\tlet R = parseInt(color.substring(1,3),16);\r\n\t\tlet G = parseInt(color.substring(3,5),16);\r\n\t\tlet B = parseInt(color.substring(5,7),16);\r\n\t\tR = parseInt(R * (100 + percent) / 100);\r\n\t\tG = parseInt(G * (100 + percent) / 100);\r\n\t\tB = parseInt(B * (100 + percent) / 100);\r\n\t\tR = (R<255)?R:255;  \r\n\t\tG = (G<255)?G:255;  \r\n\t\tB = (B<255)?B:255;  \r\n\t\tconst RR = ((R.toString(16).length === 1) ? `0${R.toString(16)}` : R.toString(16));\r\n\t\tconst GG = ((G.toString(16).length === 1) ? `0${G.toString(16)}` : G.toString(16));\r\n\t\tconst BB = ((B.toString(16).length === 1) ? `0${B.toString(16)}` : B.toString(16));\r\n\t\treturn `#${RR}${GG}${BB}`; \r\n\t}\r\n\r\n\t/**\r\n\t * Convert RGBA to HEX \r\n\t * @param {String} rgba - RGBA color code e.g 'rgba(197, 200, 198, .2)')'\r\n\t * @return {String} HEX color \r\n\t */\r\n\tstatic rgbaToHex(rgba) {\r\n\t\tconst trim = str => (str.replace(/^\\s+|\\s+$/gm,''))\r\n\t\tconst inParts = rgba.substring(rgba.indexOf(\"(\")).split(\",\"),\r\n\t\t\tr = parseInt(trim(inParts[0].substring(1)), 10),\r\n\t\t\tg = parseInt(trim(inParts[1]), 10),\r\n\t\t\tb = parseInt(trim(inParts[2]), 10),\r\n\t\t\ta = parseFloat(trim(inParts[3].substring(0, inParts[3].length - 1))).toFixed(2);\r\n\t\t\tconst outParts = [\r\n\t\t\tr.toString(16),\r\n\t\t\tg.toString(16),\r\n\t\t\tb.toString(16),\r\n\t\t\tMath.round(a * 255).toString(16).substring(0, 2)\r\n\t\t];\r\n\r\n\t\toutParts.forEach(function (part, i) {\r\n\t\t\tif (part.length === 1) {\r\n\t\t\t\toutParts[i] = '0' + part;\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn (`#${outParts.join('')}`);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns either a positive or negative \r\n\t * @param {Number} number - number value\r\n\t * @param {any} positive - value that return when positive\r\n\t * @param {any} negative - value that return when negative\r\n\t * @return {any} positive or negative value based on param\r\n\t */\r\n\tstatic getSignNum(number, positive, negative) {\r\n\t\tif (number > 0) {\r\n\t\t\treturn positive\r\n\t\t}\r\n\t\tif (number < 0) {\r\n\t\t\treturn negative\r\n\t\t}\r\n\t\treturn null\r\n\t}\r\n\r\n\t/**\r\n\t * Returns either ascending or descending value\r\n\t * @param {Object} a - antd Table sorter param a\r\n\t * @param {Object} b - antd Table sorter param b\r\n\t * @param {String} key - object key for compare\r\n\t * @return {any} a value minus b value\r\n\t */\r\n\tstatic antdTableSorter(a, b, key) {\r\n\t\tif(typeof a[key] === 'number' && typeof b[key] === 'number') {\r\n\t\t\treturn a[key] - b[key]\r\n\t\t}\r\n\r\n\t\tif(typeof a[key] === 'string' && typeof b[key] === 'string') {\r\n\t\t\ta = a[key].toLowerCase();\r\n\t\t\tb = b[key].toLowerCase();\r\n\t\t\treturn a > b ? -1 : b > a ? 1 : 0;\r\n\t\t}\r\n\t\treturn\r\n\t}\r\n\r\n\t/**\r\n\t * Filter array of object \r\n\t * @param {Array} list - array of objects that need to filter\r\n\t * @param {String} key - object key target\r\n\t * @param {any} value  - value that excluded from filter\r\n\t * @return {Array} a value minus b value\r\n\t */\r\n\tstatic filterArray(list, key, value) {\r\n\t\tlet data = list\r\n\t\tif(list) {\r\n\t\t\tdata = list.filter(item => item[key] === value)\r\n\t\t}\r\n\t\treturn data\r\n\t}\r\n\r\n\t/**\r\n\t * Remove object from array by value\r\n\t * @param {Array} list - array of objects\r\n\t * @param {String} key - object key target\r\n\t * @param {any} value  - target value\r\n\t * @return {Array} Array that removed target object\r\n\t */\r\n\tstatic deleteArrayRow(list, key, value) {\r\n\t\tlet data = list\r\n\t\tif(list) {\r\n\t\t\tdata = list.filter(item => item[key] !== value)\r\n\t\t}\r\n\t\treturn data\r\n\t}\r\n\r\n\t/**\r\n\t * Wild card search on all property of the object\r\n\t * @param {Number | String} input - any value to search\r\n\t * @param {Array} list - array for search\r\n\t * @return {Array} array of object contained keyword\r\n\t */\r\n\tstatic wildCardSearch(list, input) {\r\n\t\tconst searchText = (item) => {\r\n\t\t\tfor (let key in item) {\r\n\t\t\t\tif (item[key] == null) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif (item[key].toString().toUpperCase().indexOf(input.toString().toUpperCase()) !== -1) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\tlist = list.filter(value => searchText(value));\r\n\t\treturn list;\r\n\t}\r\n\r\n\t/**\r\n\t * Get Breakpoint\r\n\t * @param {Object} screens - Grid.useBreakpoint() from antd\r\n\t * @return {Array} array of breakpoint size\r\n\t */\r\n\tstatic getBreakPoint(screens) {\r\n\t\tlet breakpoints = []\r\n\t\tfor (const key in screens) {\r\n\t\t\tif (screens.hasOwnProperty(key)) {\r\n\t\t\t\tconst element = screens[key];\r\n\t\t\t\tif (element) {\r\n\t\t\t\t\tbreakpoints.push(key)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn breakpoints\r\n\t}\r\n}\r\n\r\nexport default Utils;","import React, { useState, useEffect } from \"react\";\r\nimport { Row, Col, Card, Select, Form, Button, notification } from \"antd\";\r\nimport api from \"configs/apiConfig\";\r\nimport Flex from \"components/shared-components/Flex\";\r\nconst { Option } = Select;\r\n\r\nconst Assign = ({ parentToChild, ...props }) => {\r\n  const [form] = Form.useForm();\r\n  const [isComponentVisible, setIsComponentVisible] = useState(true);\r\n\r\n  const [adminList, SetAdminList] = useState([]);\r\n  const [distributorList, SetDistributorList] = useState([]);\r\n  const [dealerList, SetDealerList] = useState([]);\r\n  const [subdealerList, SetSubdealerList] = useState([]);\r\n\r\n  const toggleComponentVisibility = () => {\r\n    setIsComponentVisible(!isComponentVisible);\r\n  };\r\n\r\n  const [currentUser, SetCurrentUser] = useState(\r\n    localStorage.getItem(\"id\") || \"\"\r\n  );\r\n  const [currentRole, SetCurrentRole] = useState(\r\n    localStorage.getItem(\"role\") || \"\"\r\n  );\r\n  const openNotification = (type, message, description) => {\r\n    notification[type]({\r\n      message,\r\n      description,\r\n    });\r\n  };\r\n\r\n  const getUserList = async () => {\r\n    const user_data = { user_id: currentUser };\r\n    const vehicle_data = await api\r\n      .post(\"role_based_user_list\", user_data)\r\n      .then((res) => {\r\n        return res;\r\n      })\r\n      .catch((err) => {\r\n        return [];\r\n      });\r\n\r\n    // Super Admin\r\n    if (currentRole == 1) {\r\n      console.log(\"Super Admin\");\r\n      SetAdminList(vehicle_data?.data?.data?.user_list);\r\n    }\r\n    if (currentRole == 2) {\r\n      console.log(\"Admin\");\r\n      SetDistributorList(vehicle_data?.data?.data?.user_list);\r\n    }\r\n    if (currentRole == 3) {\r\n      console.log(\"Distributor\");\r\n      SetDealerList(vehicle_data?.data?.data?.user_list);\r\n    }\r\n    if (currentRole == 4) {\r\n      console.log(\"Dealer\");\r\n      SetSubdealerList(vehicle_data?.data?.data?.subdealer_list);\r\n    }\r\n  };\r\n  const user = () => {\r\n    return localStorage.getItem(\"id\");\r\n  };\r\n  const role = () => {\r\n    return localStorage.getItem(\"role\");\r\n  };\r\n\r\n  // on change Admin\r\n  const AdminChange = async (value) => {\r\n    form.setFieldValue(\"\");\r\n    SetDistributorList([]);\r\n    SetDealerList([]);\r\n    SetSubdealerList([]);\r\n    const user_get_data = { user_id: value };\r\n    const distributor_list = await api\r\n      .post(\"role_based_user_list\", user_get_data)\r\n      .then((res) => {\r\n        return res;\r\n      })\r\n      .catch((err) => {\r\n        return err;\r\n      });\r\n    SetDistributorList(distributor_list?.data?.data?.user_list);\r\n  };\r\n  // On change Distributor\r\n  const DistributorChange = async (value) => {\r\n    form.setFieldValue(\"\");\r\n    SetDealerList(\"\");\r\n    SetSubdealerList(\"\");\r\n    const user_get_data = { user_id: value };\r\n    const dealer_list = await api\r\n      .post(\"role_based_user_list\", user_get_data)\r\n      .then((res) => {\r\n        return res;\r\n      })\r\n      .catch((err) => {\r\n        return err;\r\n      });\r\n    SetDealerList(dealer_list?.data?.data?.user_list);\r\n  };\r\n  // on change Dealer\r\n  const DealerChange = async (value) => {\r\n    form.setFieldValue(\"\");\r\n    SetSubdealerList([]);\r\n\r\n    const user_get_data = { user_id: value };\r\n    const subdealer_list = await api\r\n      .post(\"role_based_user_list\", user_get_data)\r\n      .then((res) => {\r\n        return res;\r\n      })\r\n      .catch((err) => {\r\n        return err;\r\n      });\r\n    SetSubdealerList(subdealer_list?.data?.data?.subdealer_list);\r\n  };\r\n\r\n  useEffect(() => {\r\n    SetCurrentUser(user());\r\n    SetCurrentRole(role());\r\n    getUserList();\r\n  }, []);\r\n\r\n  const onFinish = async (values) => {\r\n    if (parentToChild[1] == \"Sim\") {\r\n      values[\"id\"] = parentToChild[0];\r\n      await api.post(\"sim_transfer\", values);\r\n      form.resetFields();\r\n      props.parentFunction();\r\n      openNotification(\"success\", \"Device\", \"Sim Transfered Successfully!\");\r\n\r\n      toggleComponentVisibility();\r\n    } else if (parentToChild[1] == \"Device\") {\r\n      values[\"id\"] = parentToChild[0];\r\n      await api.post(\"device_transfer\", values);\r\n      form.resetFields();\r\n      props.parentFunction();\r\n      openNotification(\"success\", \"Device\", \"Device Transfered Successfully!\");\r\n\r\n      toggleComponentVisibility();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Row gutter={6}>\r\n      {isComponentVisible && (\r\n        <Col>\r\n          <Card title=\"Assign Form\">\r\n            <Flex>\r\n              <div className=\"container\">\r\n                <Form layout=\"vertical\" size=\"small\" onFinish={onFinish}>\r\n                  <Col sm={12} md={12} lg={12}>\r\n                    {currentRole == 1 && (\r\n                      <Form.Item label=\"Admin\" name=\"admin_id\">\r\n                        <Select\r\n                          onChange={AdminChange}\r\n                          allowClear\r\n                          showSearch\r\n                          optionFilterProp=\"children\"\r\n                        >\r\n                          {Array.isArray(adminList) ? (\r\n                            adminList.map((admin) => (\r\n                              <Select.Option\r\n                                key={admin?.id}\r\n                                role_id=\"2\"\r\n                                value={admin?.id}\r\n                              >\r\n                                {admin?.name}\r\n                              </Select.Option>\r\n                            ))\r\n                          ) : (\r\n                            <Select.Option role_id=\"2\" value=\"\"></Select.Option>\r\n                          )}\r\n                        </Select>\r\n                      </Form.Item>\r\n                    )}\r\n                  </Col>\r\n                  <Col sm={12} md={12} lg={12}>\r\n                    {(currentRole == 1 || currentRole == 2) && (\r\n                      <Form.Item label=\"Distributor\" name=\"distributor_id\">\r\n                        <Select\r\n                          onChange={DistributorChange}\r\n                          allowClear\r\n                          showSearch\r\n                          optionFilterProp=\"children\"\r\n                        >\r\n                          {Array.isArray(distributorList) ? (\r\n                            distributorList.map((distributor) => (\r\n                              <Option\r\n                                key={distributor?.id}\r\n                                role_id=\"3\"\r\n                                value={distributor?.id}\r\n                              >\r\n                                {distributor?.name}\r\n                              </Option>\r\n                            ))\r\n                          ) : (\r\n                            <Option role_id=\"3\" value=\"\"></Option>\r\n                          )}\r\n                        </Select>\r\n                      </Form.Item>\r\n                    )}\r\n                  </Col>\r\n                  <Col sm={12} md={12} lg={12}>\r\n                    {(currentRole == 1 ||\r\n                      currentRole == 2 ||\r\n                      currentRole == 3) && (\r\n                      <Form.Item label=\"Dealer\" name=\"dealer_id\">\r\n                        <Select\r\n                          onChange={DealerChange}\r\n                          allowClear\r\n                          showSearch\r\n                          optionFilterProp=\"children\"\r\n                        >\r\n                          {Array.isArray(dealerList) ? (\r\n                            dealerList.map((dealer) => (\r\n                              <Option\r\n                                key={dealer?.id}\r\n                                role_id=\"4\"\r\n                                value={dealer?.id}\r\n                              >\r\n                                {dealer?.name}\r\n                              </Option>\r\n                            ))\r\n                          ) : (\r\n                            <Option role_id=\"4\" value=\"\"></Option>\r\n                          )}\r\n                        </Select>\r\n                      </Form.Item>\r\n                    )}\r\n                  </Col>\r\n                  <Col sm={12} md={12} lg={12}>\r\n                    {(currentRole == 1 ||\r\n                      currentRole == 2 ||\r\n                      currentRole == 3 ||\r\n                      currentRole == 4) && (\r\n                      <Form.Item label=\"Subdealer\" name=\"subdealer_id\">\r\n                        <Select\r\n                          allowClear\r\n                          showSearch\r\n                          optionFilterProp=\"children\"\r\n                        >\r\n                          {Array.isArray(subdealerList) &&\r\n                          subdealerList.length > 0 ? (\r\n                            subdealerList.map((subdealer) => (\r\n                              <Option\r\n                                key={subdealer?.id}\r\n                                role_id=\"5\"\r\n                                value={subdealer?.id}\r\n                              >\r\n                                {subdealer?.name}\r\n                              </Option>\r\n                            ))\r\n                          ) : (\r\n                            <Option></Option>\r\n                          )}\r\n                        </Select>\r\n                      </Form.Item>\r\n                    )}\r\n                  </Col>\r\n                  <Button type=\"primary\" htmlType=\"submit\">\r\n                    Assign\r\n                  </Button>\r\n                </Form>\r\n              </div>\r\n            </Flex>\r\n          </Card>\r\n        </Col>\r\n      )}\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default Assign;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  Select,\r\n  Input,\r\n  Form,\r\n  Row,\r\n  Col,\r\n  Space,\r\n  DatePicker,\r\n  notification,\r\n} from \"antd\";\r\nimport Flex from \"components/shared-components/Flex\";\r\nimport api from \"configs/apiConfig\";\r\nimport moment from \"moment\";\r\nconst dateFormat = \"YYYY-MM-DD\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst Create = (props) => {\r\n  const [form] = Form.useForm();\r\n\r\n  const [selectedNetworkId, setselectedNetworkId] = useState();\r\n  const [networkOptions, setNetworkOptions] = useState([]);\r\n\r\n  const handleNetworkIdChange = (roleID) => {\r\n    setselectedNetworkId(roleID);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchNetworkOptions(setNetworkOptions);\r\n  }, []);\r\n\r\n  const openNotification = (type, message, description) => {\r\n    notification[type]({\r\n      message,\r\n      description,\r\n    });\r\n  };\r\n\r\n  const onFinish = async (values) => {\r\n    const validFrom = moment(values.valid_from).format(\"YYYY-MM-DD\");\r\n    const validTo = moment(values.valid_to).format(\"YYYY-MM-DD\");\r\n\r\n    const data = {\r\n      network_id: values.network_id,\r\n      sim_imei_no: values.sim_imei_no,\r\n      sim_mob_no1: values.sim_mob_no1,\r\n      sim_mob_no2: values.sim_mob_no2,\r\n      valid_from: validFrom,\r\n      valid_to: validTo,\r\n    };\r\n\r\n    try {\r\n      const valid_from = new Date(values[\"valid_from\"]);\r\n      values[\"valid_from\"] = valid_from.toISOString().split(\"T\")[0];\r\n      const valid_to = new Date(values[\"valid_to\"]);\r\n      values[\"valid_to\"] = valid_to.toISOString().split(\"T\")[0];\r\n\r\n      await api.post(\"sim/store\", data);\r\n      form.resetFields();\r\n      props.parentFunction();\r\n      openNotification(\"success\", \"Sim\", \"Sim Inserted Successfully!\");\r\n    } catch (error) {\r\n      if (error.response && error.response.status === 403) {\r\n        const errorData = error.response.data;\r\n        if (errorData.message && typeof errorData.message === \"object\") {\r\n          const validationErrors = errorData.message;\r\n          if (validationErrors.hasOwnProperty(\"sim_imei_no\")) {\r\n            openNotification(\r\n              \"info\",\r\n              \"Sim IMEI\",\r\n              \"Given Sim IMEI No is Already Exists\"\r\n            );\r\n          }\r\n          if (validationErrors.hasOwnProperty(\"sim_mob_no1\")) {\r\n            openNotification(\r\n              \"info\",\r\n              \"Sim Mobile Number-1\",\r\n              \"Given Sim Mobile Number-1 is Already Exists\"\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // Define the functions outside the component\r\n  async function fetchNetworkOptions(setNetworkOptions) {\r\n    try {\r\n      const response = await api.get(\"network\");\r\n      if (response.data.success) {\r\n        setNetworkOptions(response.data.data);\r\n      } else {\r\n        console.error(\"API request was not successful\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching roles:\", error);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Row gutter={6}>\r\n      <Col>\r\n        <Card title=\"New Sim\">\r\n          <Flex>\r\n            <div className=\"container\">\r\n              <Form\r\n                form={form}\r\n                size=\"small\"\r\n                name=\"registrationForm\"\r\n                onFinish={onFinish}\r\n                layout=\"vertical\"\r\n              >\r\n                <Row gutter={[8, 8]}>\r\n                  <Col sm={12} md={12} lg={12}>\r\n                    <Form.Item\r\n                      size=\"small\"\r\n                      label=\"Network\"\r\n                      name=\"network_id\"\r\n                      rules={[\r\n                        {\r\n                          required: true,\r\n                          message: \"Please Select a Network\",\r\n                        },\r\n                      ]}\r\n                    >\r\n                      <Select\r\n                        allowClear\r\n                        showSearch\r\n                        optionFilterProp=\"children\"\r\n                        onChange={handleNetworkIdChange}\r\n                        value={selectedNetworkId}\r\n                        filterOption={(input, option) =>\r\n                          option.children\r\n                            .toLowerCase()\r\n                            .indexOf(input.toLowerCase()) >= 0\r\n                        }\r\n                      >\r\n                        {Array.isArray(networkOptions) ? (\r\n                          networkOptions.map((network) => (\r\n                            <Option key={network.id} value={network.id}>\r\n                              {network.network_provider_name}\r\n                            </Option>\r\n                          ))\r\n                        ) : (\r\n                          <Option value=\"Loading\" disabled>\r\n                            Loading...\r\n                          </Option>\r\n                        )}\r\n                      </Select>\r\n                    </Form.Item>\r\n                  </Col>\r\n                  <Col sm={12} md={12} lg={12}>\r\n                    <Form.Item\r\n                      size=\"small\"\r\n                      label=\"Sim IMEI No\"\r\n                      name=\"sim_imei_no\"\r\n                      id=\"sim_imei_no\"\r\n                      rules={[\r\n                        {\r\n                          required: true,\r\n                          message: \"Please enter a Sim IMEI No\",\r\n                        },\r\n                      ]}\r\n                    >\r\n                      <Input id=\"sim_imei_no\" />\r\n                    </Form.Item>\r\n                  </Col>\r\n                  <Col sm={12} md={12} lg={12}>\r\n                    <Form.Item\r\n                      size=\"small\"\r\n                      label=\"Primary Number\"\r\n                      name=\"sim_mob_no1\"\r\n                      rules={[\r\n                        {\r\n                          required: true,\r\n                          message: \"Please enter a Primary Number\",\r\n                        },\r\n                      ]}\r\n                    >\r\n                      <Input />\r\n                    </Form.Item>\r\n                  </Col>\r\n                  <Col sm={12} md={12} lg={12}>\r\n                    <Form.Item\r\n                      size=\"small\"\r\n                      label=\"Secondary Mobile No\"\r\n                      name=\"sim_mob_no2\"\r\n                    >\r\n                      <Input />\r\n                    </Form.Item>\r\n                  </Col>\r\n                  <Col sm={12} md={12} lg={12}>\r\n                    <Form.Item name=\"valid_from\" label=\"Valid From\">\r\n                      <DatePicker\r\n                        style={{ width: \"100%\", fontSize: \"16px\" }}\r\n                        required\r\n                        allowClear={false}\r\n                        format={dateFormat}\r\n                      ></DatePicker>\r\n                    </Form.Item>\r\n                  </Col>\r\n                  <Col sm={12} md={12} lg={12}>\r\n                    <Form.Item name=\"valid_to\" label=\"Valid To\">\r\n                      <DatePicker\r\n                        style={{ width: \"100%\", fontSize: \"16px\" }}\r\n                        allowClear={false}\r\n                      ></DatePicker>\r\n                    </Form.Item>\r\n                  </Col>\r\n                </Row>\r\n\r\n                <Row align={\"middle\"}>\r\n                  <Col span={12}>\r\n                    <Form.Item>\r\n                      <Space wrap>\r\n                        <Button type=\"primary\" shape=\"round\" htmlType=\"submit\">\r\n                          Save\r\n                        </Button>\r\n                        <Button type=\"primary\" shape=\"round\">\r\n                          Back\r\n                        </Button>\r\n                      </Space>\r\n                    </Form.Item>\r\n                  </Col>\r\n                </Row>\r\n              </Form>\r\n            </div>\r\n          </Flex>\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default Create;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  Select,\r\n  Input,\r\n  Form,\r\n  Row,\r\n  Col,\r\n  Space,\r\n  DatePicker,\r\n  notification,\r\n} from \"antd\";\r\nimport Flex from \"components/shared-components/Flex\";\r\nimport api from \"configs/apiConfig\";\r\nimport moment from \"moment\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst Edit = ({ parentToChild, ...props }) => {\r\n  const [form] = Form.useForm();\r\n  const [isComponentVisible, setIsComponentVisible] = useState(true);\r\n\r\n  const [selectedNetworkId, setselectedNetworkId] = useState();\r\n  const [networkOptions, setNetworkOptions] = useState([]);\r\n\r\n  const toggleComponentVisibility = () => {\r\n    setIsComponentVisible(!isComponentVisible);\r\n  };\r\n  const handleNetworkIdChange = (roleID) => {\r\n    setselectedNetworkId(roleID);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchRoleOptions(setNetworkOptions);\r\n  }, []);\r\n\r\n  const openNotification = (type, message, description) => {\r\n    notification[type]({\r\n      message,\r\n      description,\r\n    });\r\n  };\r\n\r\n  const onFinish = async (values) => {\r\n    const validFrom = moment(values.valid_from).format(\"YYYY-MM-DD\");\r\n    const validTo = moment(values.valid_to).format(\"YYYY-MM-DD\");\r\n\r\n    const data = {\r\n      id: parentToChild[0],\r\n      network_id: values.network_id,\r\n      sim_imei_no: values.sim_imei_no,\r\n      sim_mob_no1: values.sim_mob_no1,\r\n      sim_mob_no2: values.sim_mob_no2,\r\n      valid_from: validFrom,\r\n      valid_to: validTo,\r\n    };\r\n\r\n    try {\r\n      await api.post(\"sim/update\", data);\r\n      form.resetFields();\r\n      props.parentFunction();\r\n      openNotification(\"success\", \"Sim\", \"Sim Updated Successfully!\");\r\n      toggleComponentVisibility();\r\n    } catch (error) {\r\n      if (error.response && error.response.status === 403) {\r\n        const errorData = error.response.data;\r\n        if (errorData.message && typeof errorData.message === \"object\") {\r\n          const validationErrors = errorData.message;\r\n          if (validationErrors.hasOwnProperty(\"sim_imei_no\")) {\r\n            openNotification(\r\n              \"info\",\r\n              \"Sim IMEI\",\r\n              \"Given Sim IMEI No is Already Exists\"\r\n            );\r\n          }\r\n          if (validationErrors.hasOwnProperty(\"sim_mob_no1\")) {\r\n            openNotification(\r\n              \"info\",\r\n              \"Sim Mobile Number-1\",\r\n              \"Given Sim Mobile Number-1 is Already Exists\"\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // Define the functions outside the component\r\n  async function fetchRoleOptions(setNetworkOptions) {\r\n    try {\r\n      const response = await api.get(\"network\");\r\n      if (response.data.success) {\r\n        setNetworkOptions(response.data.data);\r\n      } else {\r\n        console.error(\"API request was not successful\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching roles:\", error);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Row gutter={6}>\r\n      {isComponentVisible && (\r\n        <Col>\r\n          <Card title=\"Edit Sim\">\r\n            <Flex>\r\n              <div className=\"container\">\r\n                <Form\r\n                  form={form}\r\n                  size=\"small\"\r\n                  name=\"registrationForm\"\r\n                  onFinish={onFinish}\r\n                  layout=\"vertical\"\r\n                >\r\n                  <Row gutter={[8, 8]}>\r\n                    <Col sm={12} md={12} lg={12}>\r\n                      <Form.Item\r\n                        size=\"small\"\r\n                        label=\"Network\"\r\n                        name=\"network_id\"\r\n                        initialValue={parentToChild[1]}\r\n                        rules={[\r\n                          {\r\n                            required: true,\r\n                            message: \"Please Select a Network\",\r\n                          },\r\n                        ]}\r\n                      >\r\n                        <Select\r\n                          showSearch\r\n                          placeholder=\"Select Network\"\r\n                          optionFilterProp=\"children\"\r\n                          onChange={handleNetworkIdChange}\r\n                          value={selectedNetworkId}\r\n                          filterOption={(input, option) =>\r\n                            option.children\r\n                              .toLowerCase()\r\n                              .indexOf(input.toLowerCase()) >= 0\r\n                          }\r\n                        >\r\n                          {Array.isArray(networkOptions) ? (\r\n                            networkOptions.map((network) => (\r\n                              <Option key={network.id} value={network.id}>\r\n                                {network.network_provider_name}\r\n                              </Option>\r\n                            ))\r\n                          ) : (\r\n                            <Option value=\"Loading\" disabled>\r\n                              Loading...\r\n                            </Option>\r\n                          )}\r\n                        </Select>\r\n                      </Form.Item>\r\n                    </Col>\r\n                    <Col sm={12} md={12} lg={12}>\r\n                      <Form.Item\r\n                        size=\"small\"\r\n                        label=\"Sim IMEI No\"\r\n                        name=\"sim_imei_no\"\r\n                        initialValue={parentToChild[3]}\r\n                        rules={[\r\n                          {\r\n                            required: true,\r\n                            message: \"Please enter a Sim IMEI No\",\r\n                          },\r\n                        ]}\r\n                      >\r\n                        <Input />\r\n                      </Form.Item>\r\n                    </Col>\r\n                    <Col sm={12} md={12} lg={12}>\r\n                      <Form.Item\r\n                        initialValue={parentToChild[4]}\r\n                        size=\"small\"\r\n                        label=\"Primary Number\"\r\n                        name=\"sim_mob_no1\"\r\n                        rules={[\r\n                          {\r\n                            required: true,\r\n                            message: \"Please enter a Primary Number\",\r\n                          },\r\n                        ]}\r\n                      >\r\n                        <Input />\r\n                      </Form.Item>\r\n                    </Col>\r\n                    <Col sm={12} md={12} lg={12}>\r\n                      <Form.Item\r\n                        initialValue={parentToChild[5]}\r\n                        size=\"small\"\r\n                        label=\"Secondary Mobile No\"\r\n                        name=\"sim_mob_no2\"\r\n                        rules={[\r\n                          {\r\n                            required: true,\r\n                            message: \"Please enter a Secondary Mobile No\",\r\n                          },\r\n                        ]}\r\n                      >\r\n                        <Input />\r\n                      </Form.Item>\r\n                    </Col>\r\n\r\n                    <Col sm={12} md={12} lg={12}>\r\n                      <Form.Item\r\n                        name=\"valid_from\"\r\n                        label=\"Valid From\"\r\n                        initialValue={moment(parentToChild[6])}\r\n                        rules={[\r\n                          {\r\n                            required: true,\r\n                            message: \"Please enter a valid from\",\r\n                          },\r\n                        ]}\r\n                      >\r\n                        <DatePicker\r\n                          style={{ width: \"100%\", fontSize: \"16px\" }}\r\n                        />\r\n                      </Form.Item>\r\n                    </Col>\r\n                    <Col sm={12} md={12} lg={12}>\r\n                      <Form.Item\r\n                        name=\"valid_to\"\r\n                        label=\"Valid To\"\r\n                        initialValue={moment(parentToChild[6])}\r\n                        rules={[\r\n                          {\r\n                            required: true,\r\n                            message: \"Please select a valid to\",\r\n                          },\r\n                        ]}\r\n                      >\r\n                        <DatePicker\r\n                          style={{ width: \"100%\", fontSize: \"16px\" }}\r\n                        />\r\n                      </Form.Item>\r\n                    </Col>\r\n                  </Row>\r\n\r\n                  <Row align={\"middle\"}>\r\n                    <Col span={12}>\r\n                      <Form.Item>\r\n                        <Space wrap>\r\n                          <Button\r\n                            type=\"primary\"\r\n                            shape=\"round\"\r\n                            htmlType=\"submit\"\r\n                          >\r\n                            Update\r\n                          </Button>\r\n                          <Button type=\"primary\" shape=\"round\">\r\n                            Back\r\n                          </Button>\r\n                        </Space>\r\n                      </Form.Item>\r\n                    </Col>\r\n                  </Row>\r\n                </Form>\r\n              </div>\r\n            </Flex>\r\n          </Card>\r\n        </Col>\r\n      )}\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default Edit;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Table, Button, Card, Row, Col, Input } from \"antd\";\r\nimport { PlusOutlined, SearchOutlined, EditOutlined } from \"@ant-design/icons\";\r\nimport Flex from \"components/shared-components/Flex\";\r\nimport utils from \"utils\";\r\n\r\nimport api from \"configs/apiConfig\";\r\nimport Create from \"./create\";\r\nimport Edit from \"./edit\";\r\nimport Assign from \"../demo/index\";\r\n\r\nexport const Sim = () => {\r\n  const [selectedRowKeys, setSelectedRowKeys] = useState([]);\r\n  const [selectedRows, setSelectedRows] = useState([]);\r\n\r\n  const [simList, setSimList] = useState([]);\r\n  const [mainsimList, seMainSimList] = useState([]);\r\n\r\n  const [isCreateVisible, setIsCreateVisible] = useState(false);\r\n  const [isEditVisible, setIsEditVisible] = useState(false);\r\n  const [isAssignVisible, setIsAssignVisible] = useState(false);\r\n\r\n  const [editdata, setEditData] = useState(\"\");\r\n  const [assigndata, setAssignData] = useState(\"\");\r\n\r\n  const handleCreateCard = () => {\r\n    setIsCreateVisible(true);\r\n    setIsEditVisible(false);\r\n    setIsAssignVisible(false);\r\n  };\r\n  const handleEditCard = () => {\r\n    setIsCreateVisible(false);\r\n    setIsEditVisible(true);\r\n    setIsAssignVisible(false);\r\n  };\r\n  const handleAssignCard = () => {\r\n    setIsCreateVisible(false);\r\n    setIsEditVisible(false);\r\n    setIsAssignVisible(true);\r\n  };\r\n  const parentFunction = () => {\r\n    setIsEditVisible(false);\r\n    loadSims();\r\n  };\r\n\r\n  const loadSims = async () => {\r\n    try {\r\n      const response = await api.post(\"sim_list\");\r\n\r\n      if (response.data && Array.isArray(response.data.data)) {\r\n        const processedData = response.data.data.map((item) => ({\r\n          id: item.id,\r\n          network_id: item.network_id,\r\n          network_provider_name: item.network_provider_name,\r\n          sim_imei_no: item.sim_imei_no,\r\n          sim_mob_no1: item.sim_mob_no1,\r\n          sim_mob_no2: item.sim_mob_no2,\r\n          valid_from: item.valid_from,\r\n          valid_to: item.valid_to,\r\n        }));\r\n        setSimList(processedData);\r\n        seMainSimList(processedData);\r\n      } else {\r\n        setSimList(\"\");\r\n        seMainSimList(\"\");\r\n        console.error(\"API request was not successful\");\r\n      }\r\n    } catch (error) {\r\n      setSimList(\"\");\r\n      seMainSimList(\"\");\r\n      console.error(\"Error fetching users:\", error);\r\n    }\r\n  };\r\n\r\n  function handleEditClick(record) {\r\n    setEditData([\r\n      record.id,\r\n      record.network_id,\r\n      record.network_provider_name,\r\n      record.sim_imei_no,\r\n      record.sim_mob_no1,\r\n      record.sim_mob_no2,\r\n      record.valid_form,\r\n      record.valid_to,\r\n    ]);\r\n\r\n    // Set isEditVisible to true\r\n    setIsEditVisible(true);\r\n    setIsCreateVisible(false);\r\n    setIsAssignVisible(false);\r\n  }\r\n\r\n  function handleAssignClick(record) {\r\n    handleAssignCard();\r\n\r\n    const id = record.id;\r\n    const type = \"Sim\";\r\n    const sim_imei_no = record.sim_imei_no;\r\n\r\n    const data = [id, type, sim_imei_no];\r\n\r\n    setAssignData(data);\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadSims();\r\n  }, []);\r\n\r\n  const tableColumns = [\r\n    {\r\n      title: \"Network\",\r\n      dataIndex: \"network_provider_name\",\r\n    },\r\n    {\r\n      title: \"Sim IMEI No\",\r\n      dataIndex: \"sim_imei_no\",\r\n    },\r\n    {\r\n      title: \"Sim Mobile Number\",\r\n      dataIndex: \"sim_mob_no1\",\r\n    },\r\n    {\r\n      title: \"Sim Mobile Number\",\r\n      dataIndex: \"sim_mob_no2\",\r\n    },\r\n    {\r\n      title: \"Edit\",\r\n      dataIndex: \"edit\",\r\n      fixed: \"right\",\r\n\r\n      render: (_, record) => (\r\n        <span\r\n          style={{ cursor: \"pointer\" }}\r\n          onClick={() => handleEditClick(record)}\r\n        >\r\n          <EditOutlined />\r\n        </span>\r\n      ),\r\n    },\r\n    {\r\n      title: \"Assign\",\r\n      dataIndex: \"edit\",\r\n      fixed: \"right\",\r\n\r\n      render: (_, record) => (\r\n        <span\r\n          style={{ cursor: \"pointer\" }}\r\n          onClick={() => handleAssignClick(record)} // Replace handleEditClick with your custom action function\r\n        >\r\n          <EditOutlined /> {/* Replace EditOutlined with your custom icon */}\r\n        </span>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const onSearch = (e) => {\r\n    const searchValue = e.currentTarget.value;\r\n    const searchArray = searchValue ? simList : mainsimList; // Use a different source if needed\r\n    const filteredUserList = utils.wildCardSearch(searchArray, searchValue);\r\n    setSimList(filteredUserList);\r\n    setSelectedRowKeys([]);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Row gutter={6}>\r\n        <Col sm={24} md={14} lg={14}>\r\n          <Card title=\"Sim\">\r\n            <Flex\r\n              alignItems=\"center\"\r\n              justifyContent=\"space-between\"\r\n              mobileFlex={false}\r\n            >\r\n              <Flex className=\"mb-1\" mobileFlex={false}>\r\n                <div className=\"mr-md-3 mb-3\">\r\n                  <Input\r\n                    placeholder=\"Search\"\r\n                    prefix={<SearchOutlined />}\r\n                    onChange={(e) => onSearch(e)}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"mb-3\"></div>\r\n              </Flex>\r\n              <div className=\"mb-3\">\r\n                <Button\r\n                  type=\"primary\"\r\n                  icon={<PlusOutlined />}\r\n                  ghost\r\n                  onClick={handleCreateCard}\r\n                >\r\n                  Add Sim\r\n                </Button>\r\n              </div>\r\n            </Flex>\r\n            <div className=\"table-responsive\">\r\n              <Table\r\n                bordered\r\n                columns={tableColumns}\r\n                dataSource={simList}\r\n                rowKey=\"id\"\r\n              />\r\n            </div>\r\n          </Card>\r\n        </Col>\r\n        <Col sm={24} md={10} lg={10}>\r\n          {isCreateVisible && <Create parentFunction={parentFunction} />}\r\n\r\n          {isAssignVisible && (\r\n            <Assign\r\n              key={assigndata[0]}\r\n              parentToChild={assigndata}\r\n              parentFunction={parentFunction}\r\n            />\r\n          )}\r\n          {isEditVisible && (\r\n            <Edit\r\n              key={editdata[0]}\r\n              parentToChild={editdata}\r\n              parentFunction={parentFunction}\r\n            />\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\nexport default Sim;\r\n"],"names":["Flex","styled","div","justifyContent","alignItems","flexDirection","gap","padding","margin","baseStyle","display","Utils","name","initials","match","shift","pop","toUpperCase","navTree","path","route","p","hasOwnProperty","this","getRouteInfo","hex","hRed","parseInt","cutHex","substring","hGreen","h","hexToG","hBlue","hexToB","charAt","color","percent","R","G","B","RR","toString","length","GG","BB","rgba","trim","str","replace","inParts","indexOf","split","r","g","b","a","parseFloat","toFixed","outParts","Math","round","forEach","part","i","join","number","positive","negative","key","toLowerCase","list","value","data","filter","item","input","searchText","screens","breakpoints","push","Option","Select","parentToChild","props","Form","useForm","form","useState","isComponentVisible","setIsComponentVisible","adminList","SetAdminList","distributorList","SetDistributorList","dealerList","SetDealerList","subdealerList","SetSubdealerList","toggleComponentVisibility","localStorage","getItem","currentUser","SetCurrentUser","currentRole","SetCurrentRole","openNotification","type","message","description","notification","useEffect","user_data","user_id","api","post","then","res","catch","err","vehicle_data","console","log","user_list","subdealer_list","getUserList","gutter","title","className","layout","size","onFinish","values","resetFields","parentFunction","sm","md","lg","Item","label","onChange","setFieldValue","user_get_data","distributor_list","allowClear","showSearch","optionFilterProp","Array","isArray","map","admin","role_id","id","dealer_list","distributor","dealer","subdealer","htmlType","selectedNetworkId","setselectedNetworkId","networkOptions","setNetworkOptions","get","response","success","error","fetchNetworkOptions","validFrom","moment","valid_from","format","validTo","valid_to","network_id","sim_imei_no","sim_mob_no1","sim_mob_no2","Date","toISOString","status","errorData","validationErrors","rules","required","roleID","filterOption","option","children","network","network_provider_name","disabled","style","width","fontSize","align","span","wrap","shape","fetchRoleOptions","initialValue","placeholder","Sim","setSelectedRowKeys","simList","setSimList","mainsimList","seMainSimList","isCreateVisible","setIsCreateVisible","isEditVisible","setIsEditVisible","isAssignVisible","setIsAssignVisible","editdata","setEditData","assigndata","setAssignData","loadSims","processedData","handleAssignClick","record","tableColumns","dataIndex","fixed","render","_","cursor","onClick","valid_form","handleEditClick","EditOutlined","mobileFlex","prefix","SearchOutlined","e","searchValue","currentTarget","searchArray","filteredUserList","utils","wildCardSearch","onSearch","icon","PlusOutlined","ghost","bordered","columns","dataSource","rowKey"],"sourceRoot":""}