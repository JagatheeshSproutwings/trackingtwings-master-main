{"version":3,"file":"static/js/10.8ce45007.chunk.js","mappings":"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","sources":["components/shared-components/Flex/index.js","utils/index.js","views/app-views/customer/index.js","../node_modules/@ant-design/icons-svg/es/asn/FileExcelOutlined.js","../node_modules/@ant-design/icons/es/icons/FileExcelOutlined.js"],"sourcesContent":["import styled from '@emotion/styled';\r\n\r\nconst Flex = styled.div(({justifyContent, alignItems, flexDirection, gap, padding, margin}) => {\r\n\r\n\tconst baseStyle = {\r\n\t\tdisplay: 'flex',\r\n\t\tjustifyContent: justifyContent,\r\n\t\talignItems: alignItems,\r\n\t\tgap: typeof gap === 'number' ? `${gap}px` : gap,\r\n\t}\r\n\r\n\tif (flexDirection) {\r\n\t\tbaseStyle.flexDirection = flexDirection\r\n\t}\r\n\r\n\tif (padding) {\r\n\t\tbaseStyle.padding = padding\r\n\t}\r\n\r\n\tif (margin) {\r\n\t\tbaseStyle.margin = margin\r\n\t}\r\n\r\n\treturn {...baseStyle}\r\n})\r\n\r\nexport default Flex\r\n","class Utils {\r\n\r\n\t/**\r\n\t * Get first character from first & last sentences of a username\r\n\t * @param {String} name - Username\r\n\t * @return {String} 2 characters string\r\n\t */\r\n\tstatic getNameInitial(name) {\r\n\t\tlet initials = name.match(/\\b\\w/g) || [];\r\n\t\treturn ((initials.shift() || '') + (initials.pop() || '')).toUpperCase();\r\n\t}\r\n\r\n\t/**\r\n\t * Get current path related object from Navigation Tree\r\n\t * @param {Array} navTree - Navigation Tree from directory 'configs/NavigationConfig'\r\n\t * @param {String} path - Location path you looking for e.g '/app/dashboards/analytic'\r\n\t * @return {Object} object that contained the path string\r\n\t */\r\n\tstatic getRouteInfo(navTree, path) {\r\n\t\tif( navTree.path === path ){\r\n\t\t  \treturn navTree;\r\n\t\t}\r\n\t\tlet route; \r\n\t\tfor (let p in navTree) {\r\n\t\t\tif( navTree.hasOwnProperty(p) && typeof navTree[p] === 'object' ) {\r\n\t\t\t\troute = this.getRouteInfo(navTree[p], path);\r\n\t\t\t\tif(route){\r\n\t\t\t\t\treturn route;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn route;\r\n\t}\t\r\n\r\n\t/**\r\n\t * Get accessible color contrast\r\n\t * @param {String} hex - Hex color code e.g '#3e82f7'\r\n\t * @return {String} 'dark' or 'light'\r\n\t */\r\n\tstatic getColorContrast(hex){\r\n\t\tif(!hex) {\r\n\t\t\treturn 'dark'\r\n\t\t}\r\n\t\tconst threshold = 130;\r\n\t\tconst hRed = hexToR(hex);\r\n\t\tconst hGreen = hexToG(hex);\r\n\t\tconst hBlue = hexToB(hex);\r\n\t\tfunction hexToR(h) {return parseInt((cutHex(h)).substring(0,2),16)}\r\n\t\tfunction hexToG(h) {return parseInt((cutHex(h)).substring(2,4),16)}\r\n\t\tfunction hexToB(h) {return parseInt((cutHex(h)).substring(4,6),16)}\r\n\t\tfunction cutHex(h) {return (h.charAt(0) === '#') ? h.substring(1,7):h}\r\n\t\tconst cBrightness = ((hRed * 299) + (hGreen * 587) + (hBlue * 114)) / 1000;\r\n\t\tif (cBrightness > threshold){\r\n\t\t\treturn 'dark'\r\n\t\t} else { \r\n\t\t\treturn 'light'\r\n\t\t}\t\r\n\t}\r\n\r\n\t/**\r\n\t * Darken or lighten a hex color \r\n\t * @param {String} color - Hex color code e.g '#3e82f7'\r\n\t * @param {Number} percent - Percentage -100 to 100, positive for lighten, negative for darken\r\n\t * @return {String} Darken or lighten color \r\n\t */\r\n\tstatic shadeColor(color, percent) {\r\n\t\tlet R = parseInt(color.substring(1,3),16);\r\n\t\tlet G = parseInt(color.substring(3,5),16);\r\n\t\tlet B = parseInt(color.substring(5,7),16);\r\n\t\tR = parseInt(R * (100 + percent) / 100);\r\n\t\tG = parseInt(G * (100 + percent) / 100);\r\n\t\tB = parseInt(B * (100 + percent) / 100);\r\n\t\tR = (R<255)?R:255;  \r\n\t\tG = (G<255)?G:255;  \r\n\t\tB = (B<255)?B:255;  \r\n\t\tconst RR = ((R.toString(16).length === 1) ? `0${R.toString(16)}` : R.toString(16));\r\n\t\tconst GG = ((G.toString(16).length === 1) ? `0${G.toString(16)}` : G.toString(16));\r\n\t\tconst BB = ((B.toString(16).length === 1) ? `0${B.toString(16)}` : B.toString(16));\r\n\t\treturn `#${RR}${GG}${BB}`; \r\n\t}\r\n\r\n\t/**\r\n\t * Convert RGBA to HEX \r\n\t * @param {String} rgba - RGBA color code e.g 'rgba(197, 200, 198, .2)')'\r\n\t * @return {String} HEX color \r\n\t */\r\n\tstatic rgbaToHex(rgba) {\r\n\t\tconst trim = str => (str.replace(/^\\s+|\\s+$/gm,''))\r\n\t\tconst inParts = rgba.substring(rgba.indexOf(\"(\")).split(\",\"),\r\n\t\t\tr = parseInt(trim(inParts[0].substring(1)), 10),\r\n\t\t\tg = parseInt(trim(inParts[1]), 10),\r\n\t\t\tb = parseInt(trim(inParts[2]), 10),\r\n\t\t\ta = parseFloat(trim(inParts[3].substring(0, inParts[3].length - 1))).toFixed(2);\r\n\t\t\tconst outParts = [\r\n\t\t\tr.toString(16),\r\n\t\t\tg.toString(16),\r\n\t\t\tb.toString(16),\r\n\t\t\tMath.round(a * 255).toString(16).substring(0, 2)\r\n\t\t];\r\n\r\n\t\toutParts.forEach(function (part, i) {\r\n\t\t\tif (part.length === 1) {\r\n\t\t\t\toutParts[i] = '0' + part;\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn (`#${outParts.join('')}`);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns either a positive or negative \r\n\t * @param {Number} number - number value\r\n\t * @param {any} positive - value that return when positive\r\n\t * @param {any} negative - value that return when negative\r\n\t * @return {any} positive or negative value based on param\r\n\t */\r\n\tstatic getSignNum(number, positive, negative) {\r\n\t\tif (number > 0) {\r\n\t\t\treturn positive\r\n\t\t}\r\n\t\tif (number < 0) {\r\n\t\t\treturn negative\r\n\t\t}\r\n\t\treturn null\r\n\t}\r\n\r\n\t/**\r\n\t * Returns either ascending or descending value\r\n\t * @param {Object} a - antd Table sorter param a\r\n\t * @param {Object} b - antd Table sorter param b\r\n\t * @param {String} key - object key for compare\r\n\t * @return {any} a value minus b value\r\n\t */\r\n\tstatic antdTableSorter(a, b, key) {\r\n\t\tif(typeof a[key] === 'number' && typeof b[key] === 'number') {\r\n\t\t\treturn a[key] - b[key]\r\n\t\t}\r\n\r\n\t\tif(typeof a[key] === 'string' && typeof b[key] === 'string') {\r\n\t\t\ta = a[key].toLowerCase();\r\n\t\t\tb = b[key].toLowerCase();\r\n\t\t\treturn a > b ? -1 : b > a ? 1 : 0;\r\n\t\t}\r\n\t\treturn\r\n\t}\r\n\r\n\t/**\r\n\t * Filter array of object \r\n\t * @param {Array} list - array of objects that need to filter\r\n\t * @param {String} key - object key target\r\n\t * @param {any} value  - value that excluded from filter\r\n\t * @return {Array} a value minus b value\r\n\t */\r\n\tstatic filterArray(list, key, value) {\r\n\t\tlet data = list\r\n\t\tif(list) {\r\n\t\t\tdata = list.filter(item => item[key] === value)\r\n\t\t}\r\n\t\treturn data\r\n\t}\r\n\r\n\t/**\r\n\t * Remove object from array by value\r\n\t * @param {Array} list - array of objects\r\n\t * @param {String} key - object key target\r\n\t * @param {any} value  - target value\r\n\t * @return {Array} Array that removed target object\r\n\t */\r\n\tstatic deleteArrayRow(list, key, value) {\r\n\t\tlet data = list\r\n\t\tif(list) {\r\n\t\t\tdata = list.filter(item => item[key] !== value)\r\n\t\t}\r\n\t\treturn data\r\n\t}\r\n\r\n\t/**\r\n\t * Wild card search on all property of the object\r\n\t * @param {Number | String} input - any value to search\r\n\t * @param {Array} list - array for search\r\n\t * @return {Array} array of object contained keyword\r\n\t */\r\n\tstatic wildCardSearch(list, input) {\r\n\t\tconst searchText = (item) => {\r\n\t\t\tfor (let key in item) {\r\n\t\t\t\tif (item[key] == null) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif (item[key].toString().toUpperCase().indexOf(input.toString().toUpperCase()) !== -1) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\tlist = list.filter(value => searchText(value));\r\n\t\treturn list;\r\n\t}\r\n\r\n\t/**\r\n\t * Get Breakpoint\r\n\t * @param {Object} screens - Grid.useBreakpoint() from antd\r\n\t * @return {Array} array of breakpoint size\r\n\t */\r\n\tstatic getBreakPoint(screens) {\r\n\t\tlet breakpoints = []\r\n\t\tfor (const key in screens) {\r\n\t\t\tif (screens.hasOwnProperty(key)) {\r\n\t\t\t\tconst element = screens[key];\r\n\t\t\t\tif (element) {\r\n\t\t\t\t\tbreakpoints.push(key)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn breakpoints\r\n\t}\r\n}\r\n\r\nexport default Utils;","import React, { useState } from \"react\";\r\nimport { Table, Button, Card, Drawer, Select, Input, Form } from \"antd\";\r\nimport Flex from \"components/shared-components/Flex\";\r\nimport {\r\n  PlusOutlined,\r\n  FileExcelOutlined,\r\n  SearchOutlined,\r\n} from \"@ant-design/icons\";\r\nimport utils from \"utils\";\r\nimport OrderListData from \"assets/data/order-list.data.json\";\r\nimport userData from \"assets/data/user-list.data.json\";\r\nconst { Option } = Select;\r\nexport const Customer = () => {\r\n  const [list, setList] = useState(userData);\r\n  const [selectedRows, setSelectedRows] = useState([]);\r\n  const [selectedRowKeys, setSelectedRowKeys] = useState([]);\r\n  const [open, setOpen] = useState(false);\r\n  const showDrawer = () => {\r\n    setOpen(true);\r\n  };\r\n  const onClose = () => {\r\n    setOpen(false);\r\n  };\r\n  const tableColumns = [\r\n    {\r\n      title: \"Name\",\r\n      dataIndex: \"name\",\r\n    },\r\n    {\r\n      title: \"Email\",\r\n      dataIndex: \"email\",\r\n    },\r\n    {\r\n      title: \"Mobile Number\",\r\n      dataIndex: \"personalInfo.phoneNumber\",\r\n    },\r\n\r\n    {\r\n      title: \"Created On\",\r\n      dataIndex: \"created_at\",\r\n    },\r\n    {\r\n      title: \"Action\",\r\n      dataIndex: \"action\",\r\n    },\r\n  ];\r\n  const handleShowStatus = (value) => {\r\n    if (value !== \"All\") {\r\n      const key = \"paymentStatus\";\r\n      const data = utils.filterArray(OrderListData, key, value);\r\n      setList(data);\r\n    } else {\r\n      setList(OrderListData);\r\n    }\r\n  };\r\n  const onSearch = (e) => {\r\n    const value = e.currentTarget.value;\r\n    const searchArray = e.currentTarget.value ? list : OrderListData;\r\n    const data = utils.wildCardSearch(searchArray, value);\r\n    setList(data);\r\n    setSelectedRowKeys([]);\r\n  };\r\n  const rowSelection = {\r\n    onChange: (key, rows) => {\r\n      setSelectedRows(rows);\r\n      setSelectedRowKeys(key);\r\n    },\r\n  };\r\n  return (\r\n    <>\r\n      <Card title=\"Customer\">\r\n        <Flex\r\n          alignItems=\"center\"\r\n          justifyContent=\"space-between\"\r\n          mobileFlex={false}\r\n        >\r\n          <Flex className=\"mb-1\" mobileFlex={false}>\r\n            <div className=\"mr-md-3 mb-3\">\r\n              <Input\r\n                placeholder=\"Search\"\r\n                prefix={<SearchOutlined />}\r\n                onChange={(e) => onSearch(e)}\r\n              />\r\n            </div>\r\n            <div className=\"mr-md-3 mb-3\">\r\n              <Select\r\n                defaultValue=\"All\"\r\n                className=\"w-100\"\r\n                style={{ minWidth: 180 }}\r\n                onChange={handleShowStatus}\r\n                placeholder=\"Dealer\"\r\n              >\r\n                <Option value=\"All\">Acute</Option>\r\n              </Select>\r\n            </div>\r\n            <div className=\"mr-md-3 mb-3\">\r\n              <Select\r\n                className=\"w-100\"\r\n                style={{ minWidth: 180 }}\r\n                onChange={handleShowStatus}\r\n                placeholder=\"Customer\"\r\n              >\r\n                <Option value=\"1\">Customer 1</Option>\r\n                <Option value=\"2\">Customer 2</Option>\r\n                <Option value=\"3\">Customer 3</Option>\r\n                <Option value=\"4\">Customer 4</Option>\r\n              </Select>\r\n            </div>\r\n            <div className=\"mb-3\">\r\n              <Button type=\"primary\" icon={<FileExcelOutlined />}>\r\n                Export\r\n              </Button>\r\n            </div>\r\n\r\n            <div className=\"mb-3\"></div>\r\n          </Flex>\r\n          <div className=\"mb-3\">\r\n            <Button\r\n              type=\"primary\"\r\n              icon={<PlusOutlined />}\r\n              onClick={showDrawer}\r\n              ghost\r\n            >\r\n              Add Customer\r\n            </Button>\r\n          </div>\r\n        </Flex>\r\n        <div className=\"table-responsive\">\r\n          <Table\r\n            bordered\r\n            columns={tableColumns}\r\n            dataSource={list}\r\n            rowKey=\"id\"\r\n            rowSelection={{\r\n              selectedRowKeys: selectedRowKeys,\r\n              type: \"checkbox\",\r\n              preserveSelectedRowKeys: false,\r\n              ...rowSelection,\r\n            }}\r\n          />\r\n        </div>\r\n      </Card>\r\n      <Drawer placement=\"right\" closable={false} onClose={onClose} open={open}>\r\n        <div className=\"container\">\r\n          <h2>Customer Info</h2>\r\n          <Form name=\"customer_add\">\r\n            <Form.Item\r\n              name=\"customer_name\"\r\n              rules={[\r\n                { required: true, message: \"Customer Name is Required!\" },\r\n              ]}\r\n            >\r\n              <Input type=\"text\" placeholder=\"Customer Name\" />\r\n            </Form.Item>\r\n            <Form.Item\r\n              name=\"mobile_number\"\r\n              rules={[\r\n                { required: true, message: \"Mobile Number is Required!\" },\r\n              ]}\r\n            >\r\n              <Input type=\"text\" placeholder=\"Mobile Number\" />\r\n            </Form.Item>\r\n            <Form.Item\r\n              name=\"password\"\r\n              rules={[{ required: true, message: \"Password is Required!\" }]}\r\n            >\r\n              <Input type=\"password\" placeholder=\"Password\" />\r\n            </Form.Item>\r\n            <Form.Item\r\n              name=\"confirm_password\"\r\n              rules={[\r\n                { required: true, message: \"Confirm Password is Required!\" },\r\n              ]}\r\n            >\r\n              <Input type=\"password\" placeholder=\"Retype Password\" />\r\n            </Form.Item>\r\n            <Form.Item name=\"submit\" rules={[{ required: true }]}>\r\n              <Button type=\"primary\">Submit</Button>\r\n            </Form.Item>\r\n          </Form>\r\n        </div>\r\n      </Drawer>\r\n    </>\r\n  );\r\n};\r\nexport default Customer;\r\n","// This icon file is generated automatically.\nvar FileExcelOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M854.6 288.6L639.4 73.4c-6-6-14.1-9.4-22.6-9.4H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V311.3c0-8.5-3.4-16.7-9.4-22.7zM790.2 326H602V137.8L790.2 326zm1.8 562H232V136h302v216a42 42 0 0042 42h216v494zM514.1 580.1l-61.8-102.4c-2.2-3.6-6.1-5.8-10.3-5.8h-38.4c-2.3 0-4.5.6-6.4 1.9-5.6 3.5-7.3 10.9-3.7 16.6l82.3 130.4-83.4 132.8a12.04 12.04 0 0010.2 18.4h34.5c4.2 0 8-2.2 10.2-5.7L510 664.8l62.3 101.4c2.2 3.6 6.1 5.7 10.2 5.7H620c2.3 0 4.5-.7 6.5-1.9 5.6-3.6 7.2-11 3.6-16.6l-84-130.4 85.3-132.5a12.04 12.04 0 00-10.1-18.5h-35.7c-4.2 0-8.1 2.2-10.3 5.8l-61.2 102.3z\" } }] }, \"name\": \"file-excel\", \"theme\": \"outlined\" };\nexport default FileExcelOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport FileExcelOutlinedSvg from \"@ant-design/icons-svg/es/asn/FileExcelOutlined\";\nimport AntdIcon from '../components/AntdIcon';\nvar FileExcelOutlined = function FileExcelOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: FileExcelOutlinedSvg\n  }));\n};\nFileExcelOutlined.displayName = 'FileExcelOutlined';\nexport default /*#__PURE__*/React.forwardRef(FileExcelOutlined);"],"names":["Flex","styled","div","justifyContent","alignItems","flexDirection","gap","padding","margin","baseStyle","display","Utils","name","initials","match","shift","pop","toUpperCase","navTree","path","route","p","hasOwnProperty","this","getRouteInfo","hex","hRed","parseInt","cutHex","substring","hGreen","h","hexToG","hBlue","hexToB","charAt","color","percent","R","G","B","RR","toString","length","GG","BB","rgba","trim","str","replace","inParts","indexOf","split","r","g","b","a","parseFloat","toFixed","outParts","Math","round","forEach","part","i","join","number","positive","negative","key","toLowerCase","list","value","data","filter","item","input","searchText","screens","breakpoints","push","Option","Select","Customer","useState","userData","setList","setSelectedRows","selectedRowKeys","setSelectedRowKeys","open","setOpen","handleShowStatus","utils","filterArray","OrderListData","rowSelection","onChange","rows","title","mobileFlex","className","placeholder","prefix","e","currentTarget","searchArray","wildCardSearch","onSearch","defaultValue","style","minWidth","type","icon","onClick","ghost","bordered","columns","dataIndex","dataSource","rowKey","preserveSelectedRowKeys","placement","closable","onClose","Item","rules","required","message","FileExcelOutlined","props","ref","React","AntdIcon","_objectSpread","FileExcelOutlinedSvg","displayName"],"sourceRoot":""}