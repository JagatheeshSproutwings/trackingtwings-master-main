{"version":3,"file":"static/js/554.d5ac7881.chunk.js","mappings":"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","sources":["components/shared-components/Flex/index.js","views/app-views/stock_management/demo/index.js","views/app-views/stock_management/device/create.js","views/app-views/stock_management/device/edit.js","views/app-views/stock_management/device/index.js","../node_modules/@ant-design/icons-svg/es/asn/EditOutlined.js","../node_modules/@ant-design/icons/es/icons/EditOutlined.js","../node_modules/antd/es/col/index.js","../node_modules/antd/es/row/index.js"],"sourcesContent":["import styled from '@emotion/styled';\r\n\r\nconst Flex = styled.div(({justifyContent, alignItems, flexDirection, gap, padding, margin}) => {\r\n\r\n\tconst baseStyle = {\r\n\t\tdisplay: 'flex',\r\n\t\tjustifyContent: justifyContent,\r\n\t\talignItems: alignItems,\r\n\t\tgap: typeof gap === 'number' ? `${gap}px` : gap,\r\n\t}\r\n\r\n\tif (flexDirection) {\r\n\t\tbaseStyle.flexDirection = flexDirection\r\n\t}\r\n\r\n\tif (padding) {\r\n\t\tbaseStyle.padding = padding\r\n\t}\r\n\r\n\tif (margin) {\r\n\t\tbaseStyle.margin = margin\r\n\t}\r\n\r\n\treturn {...baseStyle}\r\n})\r\n\r\nexport default Flex\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Row, Col, Card, Select, Form, Button, notification } from \"antd\";\r\nimport api from \"configs/apiConfig\";\r\nimport Flex from \"components/shared-components/Flex\";\r\nconst { Option } = Select;\r\n\r\nconst Assign = ({ parentToChild, ...props }) => {\r\n  const [form] = Form.useForm();\r\n  const [isComponentVisible, setIsComponentVisible] = useState(true);\r\n\r\n  const [adminList, SetAdminList] = useState([]);\r\n  const [distributorList, SetDistributorList] = useState([]);\r\n  const [dealerList, SetDealerList] = useState([]);\r\n  const [subdealerList, SetSubdealerList] = useState([]);\r\n\r\n  const toggleComponentVisibility = () => {\r\n    setIsComponentVisible(!isComponentVisible);\r\n  };\r\n\r\n  const [currentUser, SetCurrentUser] = useState(\r\n    localStorage.getItem(\"id\") || \"\"\r\n  );\r\n  const [currentRole, SetCurrentRole] = useState(\r\n    localStorage.getItem(\"role\") || \"\"\r\n  );\r\n  const openNotification = (type, message, description) => {\r\n    notification[type]({\r\n      message,\r\n      description,\r\n    });\r\n  };\r\n\r\n  const getUserList = async () => {\r\n    const user_data = { user_id: currentUser };\r\n    const vehicle_data = await api\r\n      .post(\"role_based_user_list\", user_data)\r\n      .then((res) => {\r\n        return res;\r\n      })\r\n      .catch((err) => {\r\n        return [];\r\n      });\r\n\r\n    // Super Admin\r\n    if (currentRole == 1) {\r\n      console.log(\"Super Admin\");\r\n      SetAdminList(vehicle_data?.data?.data?.user_list);\r\n    }\r\n    if (currentRole == 2) {\r\n      console.log(\"Admin\");\r\n      SetDistributorList(vehicle_data?.data?.data?.user_list);\r\n    }\r\n    if (currentRole == 3) {\r\n      console.log(\"Distributor\");\r\n      SetDealerList(vehicle_data?.data?.data?.user_list);\r\n    }\r\n    if (currentRole == 4) {\r\n      console.log(\"Dealer\");\r\n      SetSubdealerList(vehicle_data?.data?.data?.subdealer_list);\r\n    }\r\n  };\r\n  const user = () => {\r\n    return localStorage.getItem(\"id\");\r\n  };\r\n  const role = () => {\r\n    return localStorage.getItem(\"role\");\r\n  };\r\n\r\n  // on change Admin\r\n  const AdminChange = async (value) => {\r\n    form.setFieldValue(\"\");\r\n    SetDistributorList([]);\r\n    SetDealerList([]);\r\n    SetSubdealerList([]);\r\n    const user_get_data = { user_id: value };\r\n    const distributor_list = await api\r\n      .post(\"role_based_user_list\", user_get_data)\r\n      .then((res) => {\r\n        return res;\r\n      })\r\n      .catch((err) => {\r\n        return err;\r\n      });\r\n    SetDistributorList(distributor_list?.data?.data?.user_list);\r\n  };\r\n  // On change Distributor\r\n  const DistributorChange = async (value) => {\r\n    form.setFieldValue(\"\");\r\n    SetDealerList(\"\");\r\n    SetSubdealerList(\"\");\r\n    const user_get_data = { user_id: value };\r\n    const dealer_list = await api\r\n      .post(\"role_based_user_list\", user_get_data)\r\n      .then((res) => {\r\n        return res;\r\n      })\r\n      .catch((err) => {\r\n        return err;\r\n      });\r\n    SetDealerList(dealer_list?.data?.data?.user_list);\r\n  };\r\n  // on change Dealer\r\n  const DealerChange = async (value) => {\r\n    form.setFieldValue(\"\");\r\n    SetSubdealerList([]);\r\n\r\n    const user_get_data = { user_id: value };\r\n    const subdealer_list = await api\r\n      .post(\"role_based_user_list\", user_get_data)\r\n      .then((res) => {\r\n        return res;\r\n      })\r\n      .catch((err) => {\r\n        return err;\r\n      });\r\n    SetSubdealerList(subdealer_list?.data?.data?.subdealer_list);\r\n  };\r\n\r\n  useEffect(() => {\r\n    SetCurrentUser(user());\r\n    SetCurrentRole(role());\r\n    getUserList();\r\n  }, []);\r\n\r\n  const onFinish = async (values) => {\r\n    if (parentToChild[1] == \"Sim\") {\r\n      values[\"id\"] = parentToChild[0];\r\n      await api.post(\"sim_transfer\", values);\r\n      form.resetFields();\r\n      props.parentFunction();\r\n      openNotification(\"success\", \"Device\", \"Sim Transfered Successfully!\");\r\n\r\n      toggleComponentVisibility();\r\n    } else if (parentToChild[1] == \"Device\") {\r\n      values[\"id\"] = parentToChild[0];\r\n      await api.post(\"device_transfer\", values);\r\n      form.resetFields();\r\n      props.parentFunction();\r\n      openNotification(\"success\", \"Device\", \"Device Transfered Successfully!\");\r\n\r\n      toggleComponentVisibility();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Row gutter={6}>\r\n      {isComponentVisible && (\r\n        <Col>\r\n          <Card title=\"Assign Form\">\r\n            <Flex>\r\n              <div className=\"container\">\r\n                <Form layout=\"vertical\" size=\"small\" onFinish={onFinish}>\r\n                  <Col sm={12} md={12} lg={12}>\r\n                    {currentRole == 1 && (\r\n                      <Form.Item label=\"Admin\" name=\"admin_id\">\r\n                        <Select\r\n                          onChange={AdminChange}\r\n                          allowClear\r\n                          showSearch\r\n                          optionFilterProp=\"children\"\r\n                        >\r\n                          {Array.isArray(adminList) ? (\r\n                            adminList.map((admin) => (\r\n                              <Select.Option\r\n                                key={admin?.id}\r\n                                role_id=\"2\"\r\n                                value={admin?.id}\r\n                              >\r\n                                {admin?.name}\r\n                              </Select.Option>\r\n                            ))\r\n                          ) : (\r\n                            <Select.Option role_id=\"2\" value=\"\"></Select.Option>\r\n                          )}\r\n                        </Select>\r\n                      </Form.Item>\r\n                    )}\r\n                  </Col>\r\n                  <Col sm={12} md={12} lg={12}>\r\n                    {(currentRole == 1 || currentRole == 2) && (\r\n                      <Form.Item label=\"Distributor\" name=\"distributor_id\">\r\n                        <Select\r\n                          onChange={DistributorChange}\r\n                          allowClear\r\n                          showSearch\r\n                          optionFilterProp=\"children\"\r\n                        >\r\n                          {Array.isArray(distributorList) ? (\r\n                            distributorList.map((distributor) => (\r\n                              <Option\r\n                                key={distributor?.id}\r\n                                role_id=\"3\"\r\n                                value={distributor?.id}\r\n                              >\r\n                                {distributor?.name}\r\n                              </Option>\r\n                            ))\r\n                          ) : (\r\n                            <Option role_id=\"3\" value=\"\"></Option>\r\n                          )}\r\n                        </Select>\r\n                      </Form.Item>\r\n                    )}\r\n                  </Col>\r\n                  <Col sm={12} md={12} lg={12}>\r\n                    {(currentRole == 1 ||\r\n                      currentRole == 2 ||\r\n                      currentRole == 3) && (\r\n                      <Form.Item label=\"Dealer\" name=\"dealer_id\">\r\n                        <Select\r\n                          onChange={DealerChange}\r\n                          allowClear\r\n                          showSearch\r\n                          optionFilterProp=\"children\"\r\n                        >\r\n                          {Array.isArray(dealerList) ? (\r\n                            dealerList.map((dealer) => (\r\n                              <Option\r\n                                key={dealer?.id}\r\n                                role_id=\"4\"\r\n                                value={dealer?.id}\r\n                              >\r\n                                {dealer?.name}\r\n                              </Option>\r\n                            ))\r\n                          ) : (\r\n                            <Option role_id=\"4\" value=\"\"></Option>\r\n                          )}\r\n                        </Select>\r\n                      </Form.Item>\r\n                    )}\r\n                  </Col>\r\n                  <Col sm={12} md={12} lg={12}>\r\n                    {(currentRole == 1 ||\r\n                      currentRole == 2 ||\r\n                      currentRole == 3 ||\r\n                      currentRole == 4) && (\r\n                      <Form.Item label=\"Subdealer\" name=\"subdealer_id\">\r\n                        <Select\r\n                          allowClear\r\n                          showSearch\r\n                          optionFilterProp=\"children\"\r\n                        >\r\n                          {Array.isArray(subdealerList) &&\r\n                          subdealerList.length > 0 ? (\r\n                            subdealerList.map((subdealer) => (\r\n                              <Option\r\n                                key={subdealer?.id}\r\n                                role_id=\"5\"\r\n                                value={subdealer?.id}\r\n                              >\r\n                                {subdealer?.name}\r\n                              </Option>\r\n                            ))\r\n                          ) : (\r\n                            <Option></Option>\r\n                          )}\r\n                        </Select>\r\n                      </Form.Item>\r\n                    )}\r\n                  </Col>\r\n                  <Button type=\"primary\" htmlType=\"submit\">\r\n                    Assign\r\n                  </Button>\r\n                </Form>\r\n              </div>\r\n            </Flex>\r\n          </Card>\r\n        </Col>\r\n      )}\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default Assign;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  Select,\r\n  Input,\r\n  Form,\r\n  Row,\r\n  Col,\r\n  Space,\r\n  notification,\r\n} from \"antd\";\r\nimport Flex from \"components/shared-components/Flex\";\r\nimport api from \"configs/apiConfig\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst Create = (props) => {\r\n  const [form] = Form.useForm();\r\n\r\n  const [selectedSupplierId, setselectedSupplierId] = useState();\r\n  const [supplierOptions, setSupplierOptions] = useState([]);\r\n  const [selectedMakeId, setselectedMakeId] = useState();\r\n  const [makeOptions, setMakeOptions] = useState([]);\r\n  const [selectedModelId, setselectedModelId] = useState();\r\n  const [modelOptions, setModelOptions] = useState([]);\r\n\r\n  const handleSupplierIdChange = (roleID) => {\r\n    setselectedSupplierId(roleID);\r\n  };\r\n  const handleMakeIdChange = (roleID) => {\r\n    setselectedMakeId(roleID);\r\n  };\r\n\r\n  const handleModelIdChange = (roleID) => {\r\n    setselectedModelId(roleID);\r\n  };\r\n\r\n  const openNotification = (type, message, description) => {\r\n    notification[type]({\r\n      message,\r\n      description,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchSupplierOptions(setSupplierOptions);\r\n    fetchMakeOptions(setMakeOptions);\r\n    fetchModelOptions(setModelOptions);\r\n  }, []);\r\n\r\n  const onFinish = async (values) => {\r\n    const data = {\r\n      supplier_id: values.supplier_id,\r\n      device_make_id: values.device_make_id,\r\n      device_model_id: values.device_model_id,\r\n      device_imei_no: values.device_imei_no,\r\n      uid: values.uid,\r\n      ccid: values.ccid,\r\n    };\r\n\r\n    try {\r\n      await api.post(\"device/store\", data);\r\n      form.resetFields();\r\n      props.parentFunction();\r\n      openNotification(\"success\", \"Device\", \"Device Inserted Successfully!\");\r\n    } catch (error) {\r\n      if (error.response && error.response.status === 403) {\r\n        const errorData = error.response.data;\r\n        if (errorData.message && typeof errorData.message === \"object\") {\r\n          const validationErrors = errorData.message;\r\n          if (validationErrors.hasOwnProperty(\"device_imei_no\")) {\r\n            openNotification(\r\n              \"info\",\r\n              \"Device IMEI No\",\r\n              \"Device IMEI No is Already Exists\"\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // Define the functions outside the component\r\n  async function fetchSupplierOptions(setSupplierOptions) {\r\n    try {\r\n      const response = await api.get(\"supplier\");\r\n      if (response.data.success) {\r\n        setSupplierOptions(response.data.data);\r\n      } else {\r\n        console.error(\"API request was not successful\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching roles:\", error);\r\n    }\r\n  }\r\n\r\n  async function fetchMakeOptions(setMakeOptions) {\r\n    try {\r\n      const response = await api.get(\"device_make\");\r\n      if (response.data.success) {\r\n        setMakeOptions(response.data.data);\r\n      } else {\r\n        console.error(\"API request was not successful\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching roles:\", error);\r\n    }\r\n  }\r\n\r\n  async function fetchModelOptions(setModelOptions) {\r\n    try {\r\n      const response = await api.get(\"device_model\");\r\n      if (response.data.success) {\r\n        setModelOptions(response.data.data);\r\n      } else {\r\n        console.error(\"API request was not successful\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching roles:\", error);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Row gutter={6}>\r\n      <Col>\r\n        <Card title=\"New Device\">\r\n          <Flex>\r\n            <div className=\"container\">\r\n              <Form\r\n                form={form}\r\n                size=\"small\"\r\n                name=\"registrationForm\"\r\n                onFinish={onFinish}\r\n                layout=\"vertical\"\r\n              >\r\n                <Row gutter={[8, 8]}>\r\n                  <Col sm={12} md={12} lg={12}>\r\n                    <Form.Item\r\n                      size=\"small\"\r\n                      label=\"Supplier\"\r\n                      name=\"supplier_id\"\r\n                      rules={[\r\n                        {\r\n                          required: true,\r\n                          message: \"Please Select a Supplier\",\r\n                        },\r\n                      ]}\r\n                    >\r\n                      <Select\r\n                        showSearch\r\n                        allowClear\r\n                        optionFilterProp=\"children\"\r\n                        placeholder=\"Select Supplier\"\r\n                        onChange={handleSupplierIdChange}\r\n                        value={selectedSupplierId}\r\n                        filterOption={(input, option) =>\r\n                          option.children\r\n                            .toLowerCase()\r\n                            .indexOf(input.toLowerCase()) >= 0\r\n                        }\r\n                      >\r\n                        {Array.isArray(supplierOptions) ? (\r\n                          supplierOptions.map((supplier) => (\r\n                            <Option key={supplier.id} value={supplier.id}>\r\n                              {supplier.supplier_name}\r\n                            </Option>\r\n                          ))\r\n                        ) : (\r\n                          <Option value=\"Loading\" disabled>\r\n                            Loading...\r\n                          </Option>\r\n                        )}\r\n                      </Select>\r\n                    </Form.Item>\r\n                  </Col>\r\n                  <Col sm={12} md={12} lg={12}>\r\n                    <Form.Item\r\n                      size=\"small\"\r\n                      label=\"Device Make\"\r\n                      name=\"device_make_id\"\r\n                      rules={[\r\n                        {\r\n                          required: true,\r\n                          message: \"Please Select a Device Make\",\r\n                        },\r\n                      ]}\r\n                    >\r\n                      <Select\r\n                        showSearch\r\n                        allowClear\r\n                        placeholder=\"Select Device Make\"\r\n                        optionFilterProp=\"children\"\r\n                        onChange={handleMakeIdChange}\r\n                        value={selectedMakeId}\r\n                        filterOption={(input, option) =>\r\n                          option.children\r\n                            .toLowerCase()\r\n                            .indexOf(input.toLowerCase()) >= 0\r\n                        }\r\n                      >\r\n                        {Array.isArray(makeOptions) ? (\r\n                          makeOptions.map((make) => (\r\n                            <Option key={make.id} value={make.id}>\r\n                              {make.device_make}\r\n                            </Option>\r\n                          ))\r\n                        ) : (\r\n                          <Option value=\"Loading\" disabled>\r\n                            Loading...\r\n                          </Option>\r\n                        )}\r\n                      </Select>\r\n                    </Form.Item>\r\n                  </Col>\r\n                  <Col sm={12} md={12} lg={12}>\r\n                    <Form.Item\r\n                      size=\"small\"\r\n                      label=\"Device Model\"\r\n                      name=\"device_model_id\"\r\n                      rules={[\r\n                        {\r\n                          required: true,\r\n                          message: \"Please Select a Device Model\",\r\n                        },\r\n                      ]}\r\n                    >\r\n                      <Select\r\n                        showSearch\r\n                        allowClear\r\n                        placeholder=\"Select Device Model\"\r\n                        optionFilterProp=\"children\"\r\n                        onChange={handleModelIdChange}\r\n                        value={selectedModelId}\r\n                        filterOption={(input, option) =>\r\n                          option.children\r\n                            .toLowerCase()\r\n                            .indexOf(input.toLowerCase()) >= 0\r\n                        }\r\n                      >\r\n                        {Array.isArray(modelOptions) ? (\r\n                          modelOptions.map((model) => (\r\n                            <Option key={model.id} value={model.id}>\r\n                              {model.device_model}\r\n                            </Option>\r\n                          ))\r\n                        ) : (\r\n                          <Option value=\"Loading\" disabled>\r\n                            Loading...\r\n                          </Option>\r\n                        )}\r\n                      </Select>\r\n                    </Form.Item>\r\n                  </Col>\r\n\r\n                  <Col sm={12} md={12} lg={12}>\r\n                    <Form.Item\r\n                      size=\"small\"\r\n                      label=\"Device IMEI No\"\r\n                      name=\"device_imei_no\"\r\n                      rules={[\r\n                        {\r\n                          required: true,\r\n                          message: \"Please enter a Device IMEI No\",\r\n                        },\r\n                      ]}\r\n                    >\r\n                      <Input />\r\n                    </Form.Item>\r\n                  </Col>\r\n                  <Col sm={12} md={12} lg={12}>\r\n                    <Form.Item size=\"small\" label=\"Device UID\" name=\"uid\">\r\n                      <Input />\r\n                    </Form.Item>\r\n                  </Col>\r\n                  <Col sm={12} md={12} lg={12}>\r\n                    <Form.Item size=\"small\" label=\"Device CCID\" name=\"ccid\">\r\n                      <Input />\r\n                    </Form.Item>\r\n                  </Col>\r\n                </Row>\r\n                <Row align={\"middle\"}>\r\n                  <Col span={12}>\r\n                    <Form.Item>\r\n                      <Space wrap>\r\n                        <Button type=\"primary\" shape=\"round\" htmlType=\"submit\">\r\n                          Save\r\n                        </Button>\r\n                        <Button type=\"primary\" shape=\"round\">\r\n                          Back\r\n                        </Button>\r\n                      </Space>\r\n                    </Form.Item>\r\n                  </Col>\r\n                </Row>\r\n              </Form>\r\n            </div>\r\n          </Flex>\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\nexport default Create;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  Select,\r\n  Input,\r\n  Form,\r\n  Row,\r\n  Col,\r\n  Space,\r\n  notification,\r\n} from \"antd\";\r\nimport Flex from \"components/shared-components/Flex\";\r\nimport api from \"configs/apiConfig\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst Edit = ({ parentToChild, ...props }) => {\r\n  const [form] = Form.useForm();\r\n\r\n  const [selectedSupplierId, setselectedSupplierId] = useState();\r\n  const [supplierOptions, setSupplierOptions] = useState([]);\r\n  const [selectedMakeId, setselectedMakeId] = useState();\r\n  const [makeOptions, setMakeOptions] = useState([]);\r\n  const [selectedModelId, setselectedModelId] = useState();\r\n  const [modelOptions, setModelOptions] = useState([]);\r\n  const [isComponentVisible, setIsComponentVisible] = useState(true);\r\n\r\n  const toggleComponentVisibility = () => {\r\n    setIsComponentVisible(!isComponentVisible);\r\n  };\r\n  const handleSupplierIdChange = (roleID) => {\r\n    setselectedSupplierId(roleID);\r\n  };\r\n  const handleMakeIdChange = (roleID) => {\r\n    setselectedMakeId(roleID);\r\n  };\r\n  const handleModelIdChange = (roleID) => {\r\n    setselectedModelId(roleID);\r\n  };\r\n\r\n  const openNotification = (type, message, description) => {\r\n    notification[type]({\r\n      message,\r\n      description,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchSupplierOptions(setSupplierOptions);\r\n    fetchMakeOptions(setMakeOptions);\r\n    fetchModelOptions(setModelOptions);\r\n  }, []);\r\n\r\n  const onFinish = async (values) => {\r\n    const data = {\r\n      id: parentToChild[0],\r\n      supplier_id: values.supplier_id,\r\n      device_make_id: values.device_make_id,\r\n      device_model_id: values.device_model_id,\r\n      device_imei_no: values.device_imei_no,\r\n      uid: values.uid,\r\n      ccid: values.ccid,\r\n    };\r\n\r\n    try {\r\n      await api.post(\"device/update\", data);\r\n      form.resetFields();\r\n      props.parentFunction();\r\n      openNotification(\"success\", \"Device\", \"Device Updated Successfully!\");\r\n      toggleComponentVisibility();\r\n    } catch (error) {\r\n      if (error.response && error.response.status === 403) {\r\n        const errorData = error.response.data;\r\n        if (errorData.message && typeof errorData.message === \"object\") {\r\n          const validationErrors = errorData.message;\r\n          if (validationErrors.hasOwnProperty(\"device_imei_no\")) {\r\n            openNotification(\r\n              \"info\",\r\n              \"Device IMEI No\",\r\n              \"Device IMEI No is Already Exists\"\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // Define the functions outside the component\r\n  async function fetchSupplierOptions(setSupplierOptions) {\r\n    try {\r\n      const response = await api.get(\"supplier\");\r\n      if (response.data.success) {\r\n        setSupplierOptions(response.data.data);\r\n      } else {\r\n        console.error(\"API request was not successful\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching roles:\", error);\r\n    }\r\n  }\r\n\r\n  async function fetchMakeOptions(setMakeOptions) {\r\n    try {\r\n      const response = await api.get(\"device_make\");\r\n      if (response.data.success) {\r\n        setMakeOptions(response.data.data);\r\n      } else {\r\n        console.error(\"API request was not successful\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching roles:\", error);\r\n    }\r\n  }\r\n\r\n  async function fetchModelOptions(setModelOptions) {\r\n    try {\r\n      const response = await api.get(\"device_model\");\r\n      if (response.data.success) {\r\n        setModelOptions(response.data.data);\r\n      } else {\r\n        console.error(\"API request was not successful\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching roles:\", error);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Row gutter={6}>\r\n      {isComponentVisible && (\r\n        <Col>\r\n          <Card title=\"Edit Device\">\r\n            <Flex>\r\n              <div className=\"container\">\r\n                <Form\r\n                  size=\"small\"\r\n                  name=\"registrationForm\"\r\n                  onFinish={onFinish}\r\n                  layout=\"vertical\"\r\n                >\r\n                  <Row gutter={[8, 8]}>\r\n                    <Col sm={12} md={12} lg={12}>\r\n                      <Form.Item\r\n                        initialValue={parentToChild[1]}\r\n                        size=\"small\"\r\n                        label=\"Supplier\"\r\n                        name=\"supplier_id\"\r\n                        rules={[\r\n                          {\r\n                            required: true,\r\n                            message: \"Please Select a Supplier\",\r\n                          },\r\n                        ]}\r\n                      >\r\n                        <Select\r\n                          showSearch\r\n                          placeholder=\"Select Supplier\"\r\n                          optionFilterProp=\"children\"\r\n                          onChange={handleSupplierIdChange}\r\n                          value={selectedSupplierId}\r\n                          filterOption={(input, option) =>\r\n                            option.children\r\n                              .toLowerCase()\r\n                              .indexOf(input.toLowerCase()) >= 0\r\n                          }\r\n                        >\r\n                          {Array.isArray(supplierOptions) ? (\r\n                            supplierOptions.map((supplier) => (\r\n                              <Option key={supplier.id} value={supplier.id}>\r\n                                {supplier.supplier_name}\r\n                              </Option>\r\n                            ))\r\n                          ) : (\r\n                            <Option value=\"Loading\" disabled>\r\n                              Loading...\r\n                            </Option>\r\n                          )}\r\n                        </Select>\r\n                      </Form.Item>\r\n                    </Col>\r\n                    <Col sm={12} md={12} lg={12}>\r\n                      <Form.Item\r\n                        initialValue={parentToChild[3]}\r\n                        size=\"small\"\r\n                        label=\"Device Make\"\r\n                        name=\"device_make_id\"\r\n                        rules={[\r\n                          {\r\n                            required: true,\r\n                            message: \"Please Select a Device Make\",\r\n                          },\r\n                        ]}\r\n                      >\r\n                        <Select\r\n                          showSearch\r\n                          placeholder=\"Select Device Make\"\r\n                          optionFilterProp=\"children\"\r\n                          onChange={handleMakeIdChange}\r\n                          value={selectedMakeId}\r\n                          filterOption={(input, option) =>\r\n                            option.children\r\n                              .toLowerCase()\r\n                              .indexOf(input.toLowerCase()) >= 0\r\n                          }\r\n                        >\r\n                          {Array.isArray(makeOptions) ? (\r\n                            makeOptions.map((make) => (\r\n                              <Option key={make.id} value={make.id}>\r\n                                {make.device_make}\r\n                              </Option>\r\n                            ))\r\n                          ) : (\r\n                            <Option value=\"Loading\" disabled>\r\n                              Loading...\r\n                            </Option>\r\n                          )}\r\n                        </Select>\r\n                      </Form.Item>\r\n                    </Col>\r\n                    <Col sm={12} md={12} lg={12}>\r\n                      <Form.Item\r\n                        initialValue={parentToChild[5]}\r\n                        size=\"small\"\r\n                        label=\"Device Model\"\r\n                        name=\"device_model_id\"\r\n                        rules={[\r\n                          {\r\n                            required: true,\r\n                            message: \"Please Select a Device Model\",\r\n                          },\r\n                        ]}\r\n                      >\r\n                        <Select\r\n                          showSearch\r\n                          placeholder=\"Select Device Model\"\r\n                          optionFilterProp=\"children\"\r\n                          onChange={handleModelIdChange}\r\n                          value={selectedModelId}\r\n                          filterOption={(input, option) =>\r\n                            option.children\r\n                              .toLowerCase()\r\n                              .indexOf(input.toLowerCase()) >= 0\r\n                          }\r\n                        >\r\n                          {Array.isArray(modelOptions) ? (\r\n                            modelOptions.map((model) => (\r\n                              <Option key={model.id} value={model.id}>\r\n                                {model.device_model}\r\n                              </Option>\r\n                            ))\r\n                          ) : (\r\n                            <Option value=\"Loading\" disabled>\r\n                              Loading...\r\n                            </Option>\r\n                          )}\r\n                        </Select>\r\n                      </Form.Item>\r\n                    </Col>\r\n                    <Col sm={12} md={12} lg={12}>\r\n                      <Form.Item\r\n                        initialValue={parentToChild[7]}\r\n                        size=\"small\"\r\n                        label=\"Device IMEI No\"\r\n                        name=\"device_imei_no\"\r\n                        rules={[\r\n                          {\r\n                            required: true,\r\n                            message: \"Please enter a Device IMEI No\",\r\n                          },\r\n                        ]}\r\n                      >\r\n                        <Input />\r\n                      </Form.Item>\r\n                    </Col>\r\n                    <Col sm={12} md={12} lg={12}>\r\n                      <Form.Item\r\n                        initialValue={parentToChild[8]}\r\n                        size=\"small\"\r\n                        label=\"Device UID\"\r\n                        name=\"uid\"\r\n                      >\r\n                        <Input />\r\n                      </Form.Item>\r\n                    </Col>\r\n                    <Col sm={12} md={12} lg={12}>\r\n                      <Form.Item\r\n                        initialValue={parentToChild[9]}\r\n                        size=\"small\"\r\n                        label=\"Device CCID\"\r\n                        name=\"ccid\"\r\n                      >\r\n                        <Input />\r\n                      </Form.Item>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row align={\"middle\"}>\r\n                    <Col span={12}>\r\n                      <Form.Item>\r\n                        <Space wrap>\r\n                          <Button\r\n                            type=\"primary\"\r\n                            shape=\"round\"\r\n                            htmlType=\"submit\"\r\n                          >\r\n                            Update\r\n                          </Button>\r\n                          <Button type=\"primary\" shape=\"round\">\r\n                            Back\r\n                          </Button>\r\n                        </Space>\r\n                      </Form.Item>\r\n                    </Col>\r\n                  </Row>\r\n                </Form>\r\n              </div>\r\n            </Flex>\r\n          </Card>\r\n        </Col>\r\n      )}\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default Edit;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Table, Button, Card, Row, Col, Input } from \"antd\";\r\nimport { PlusOutlined, SearchOutlined, EditOutlined } from \"@ant-design/icons\";\r\nimport Flex from \"components/shared-components/Flex\";\r\nimport api from \"configs/apiConfig\";\r\nimport Create from \"./create\";\r\nimport Edit from \"./edit\";\r\nimport Assign from \"../demo/index\";\r\n\r\nexport const Device = () => {\r\n  const [deviceList, setDeviceList] = useState([]);\r\n  const [selectedRowKeys, setSelectedRowKeys] = useState([]);\r\n  const [isCreateVisible, setIsCreateVisible] = useState(false);\r\n  const [isEditVisible, setIsEditVisible] = useState(false);\r\n  const [isAssignVisible, setIsAssignVisible] = useState(false);\r\n\r\n  const [editdata, setEditData] = useState(\"\");\r\n  const [assigndata, setAssignData] = useState(\"\");\r\n\r\n  const handleCreateCard = () => {\r\n    setIsCreateVisible(true);\r\n    setIsEditVisible(false);\r\n    setIsAssignVisible(false);\r\n  };\r\n  const handleEditCard = () => {\r\n    setIsCreateVisible(false);\r\n    setIsEditVisible(true);\r\n  };\r\n  const handleAssignCard = () => {\r\n    setIsCreateVisible(false);\r\n    setIsEditVisible(false);\r\n    setIsAssignVisible(true);\r\n  };\r\n\r\n  const parentFunction = () => {\r\n    console.log(deviceList);\r\n    loadDevices();\r\n  };\r\n\r\n  const loadDevices = async () => {\r\n    try {\r\n      const response = await api.post(\"device_list\");\r\n\r\n      if (response.data && Array.isArray(response.data.data)) {\r\n        const processedData = response.data.data.map((item) => ({\r\n          id: item.id,\r\n          supplier_id: item.supplier_id,\r\n          supplier_name: item.supplier_name,\r\n          device_imei_no: item.device_imei_no,\r\n          ccid: item.ccid,\r\n          uid: item.uid,\r\n          device_make_id: item.device_make_id,\r\n          device_model_id: item.device_model_id,\r\n          device_make: item.device_make,\r\n          device_model: item.device_model,\r\n        }));\r\n        setDeviceList(processedData);\r\n      } else {\r\n        console.error(\"API request was not successful\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching users:\", error);\r\n    }\r\n  };\r\n\r\n  function handleEditClick(record) {\r\n    setEditData([\r\n      record.id,\r\n      record.supplier_id,\r\n      record.supplier_name,\r\n      record.device_make_id,\r\n      record.device_make,\r\n      record.device_model_id,\r\n      record.device_model,\r\n      record.device_imei_no,\r\n      record.ccid,\r\n      record.uid,\r\n    ]);\r\n\r\n    // Set isEditVisible to true\r\n    setIsEditVisible(true);\r\n    setIsCreateVisible(false);\r\n    setIsAssignVisible(false);\r\n  }\r\n\r\n  function handleAssignClick(record) {\r\n    handleAssignCard();\r\n\r\n    const id = record.id;\r\n    const type = \"Device\";\r\n    const device_imei_no = record.device_imei_no;\r\n\r\n    const data = [id, type, device_imei_no];\r\n\r\n    setAssignData(data);\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadDevices(setDeviceList);\r\n  }, []);\r\n\r\n  const tableColumns = [\r\n    {\r\n      title: \"Supplier Name\",\r\n      dataIndex: \"supplier_name\",\r\n    },\r\n    {\r\n      title: \"Device No\",\r\n      dataIndex: \"device_imei_no\",\r\n    },\r\n    {\r\n      title: \"Device Make\",\r\n      dataIndex: \"device_make\",\r\n    },\r\n    {\r\n      title: \"Device Model\",\r\n      dataIndex: \"device_model\",\r\n    },\r\n    {\r\n      title: \"Edit\",\r\n      dataIndex: \"edit\",\r\n      render: (_, record) => (\r\n        <span\r\n          style={{ cursor: \"pointer\" }}\r\n          onClick={() => handleEditClick(record)}\r\n        >\r\n          <EditOutlined />\r\n        </span>\r\n      ),\r\n    },\r\n    {\r\n      title: \"Assign\",\r\n      dataIndex: \"edit\",\r\n      render: (_, record) => (\r\n        <span\r\n          style={{ cursor: \"pointer\" }}\r\n          onClick={() => handleAssignClick(record)} // Replace handleEditClick with your custom action function\r\n        >\r\n          <EditOutlined /> {/* Replace EditOutlined with your custom icon */}\r\n        </span>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  // const onSearch = (e) => {\r\n  //   const value = e.currentTarget.value;\r\n  //   const searchArray = e.currentTarget.value ? deviceList : OrderListData;\r\n  //   const data = utils.wildCardSearch(searchArray, value);\r\n  //   setDeviceList(data);\r\n  //   setSelectedRowKeys([]);\r\n  // };\r\n\r\n  const rowSelection = {\r\n    onChange: (key, rows) => {\r\n      setSelectedRowKeys(key);\r\n    },\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Row gutter={6}>\r\n        <Col sm={24} md={14} lg={14}>\r\n          <Card title=\"Device\">\r\n            <Flex\r\n              alignItems=\"center\"\r\n              justifyContent=\"space-between\"\r\n              mobileFlex={false}\r\n            >\r\n              <Flex className=\"mb-1\" mobileFlex={false}>\r\n                <div className=\"mr-md-3 mb-3\">\r\n                  <Input\r\n                    placeholder=\"Search\"\r\n                    prefix={<SearchOutlined />}\r\n                    // onChange={(e) => onSearch(e)}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"mb-3\"></div>\r\n              </Flex>\r\n              <div className=\"mb-3\">\r\n                <Button\r\n                  type=\"primary\"\r\n                  icon={<PlusOutlined />}\r\n                  ghost\r\n                  onClick={handleCreateCard}\r\n                >\r\n                  Add Device\r\n                </Button>\r\n              </div>\r\n            </Flex>\r\n            <div className=\"table-responsive\">\r\n              <Table\r\n                bordered\r\n                columns={tableColumns}\r\n                dataSource={deviceList}\r\n                rowKey=\"id\"\r\n                rowSelection={{\r\n                  selectedRowKeys: selectedRowKeys,\r\n                  type: \"checkbox\",\r\n                  preserveSelectedRowKeys: false,\r\n                  ...rowSelection,\r\n                }}\r\n              />\r\n            </div>\r\n          </Card>\r\n        </Col>\r\n        <Col sm={24} md={10} lg={10}>\r\n          {isCreateVisible && <Create parentFunction={parentFunction} />}\r\n          {isAssignVisible && (\r\n            <Assign\r\n              key={assigndata[0]}\r\n              parentToChild={assigndata}\r\n              parentFunction={parentFunction}\r\n            />\r\n          )}\r\n          {isEditVisible && (\r\n            <Edit\r\n              key={editdata[0]}\r\n              parentToChild={editdata}\r\n              parentFunction={parentFunction}\r\n            />\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\nexport default Device;\r\n","// This icon file is generated automatically.\nvar EditOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M257.7 752c2 0 4-.2 6-.5L431.9 722c2-.4 3.9-1.3 5.3-2.8l423.9-423.9a9.96 9.96 0 000-14.1L694.9 114.9c-1.9-1.9-4.4-2.9-7.1-2.9s-5.2 1-7.1 2.9L256.8 538.8c-1.5 1.5-2.4 3.3-2.8 5.3l-29.5 168.2a33.5 33.5 0 009.4 29.8c6.6 6.4 14.9 9.9 23.8 9.9zm67.4-174.4L687.8 215l73.3 73.3-362.7 362.6-88.9 15.7 15.6-89zM880 836H144c-17.7 0-32 14.3-32 32v36c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-36c0-17.7-14.3-32-32-32z\" } }] }, \"name\": \"edit\", \"theme\": \"outlined\" };\nexport default EditOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport EditOutlinedSvg from \"@ant-design/icons-svg/es/asn/EditOutlined\";\nimport AntdIcon from '../components/AntdIcon';\nvar EditOutlined = function EditOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: EditOutlinedSvg\n  }));\n};\nEditOutlined.displayName = 'EditOutlined';\nexport default /*#__PURE__*/React.forwardRef(EditOutlined);","import { Col } from '../grid';\nexport default Col;","import { Row } from '../grid';\nexport default Row;"],"names":["Flex","styled","div","justifyContent","alignItems","flexDirection","gap","padding","margin","baseStyle","display","Option","Select","parentToChild","props","Form","useForm","form","useState","isComponentVisible","setIsComponentVisible","adminList","SetAdminList","distributorList","SetDistributorList","dealerList","SetDealerList","subdealerList","SetSubdealerList","toggleComponentVisibility","localStorage","getItem","currentUser","SetCurrentUser","currentRole","SetCurrentRole","openNotification","type","message","description","notification","getUserList","user_data","user_id","api","post","then","res","catch","err","vehicle_data","console","log","data","user_list","subdealer_list","AdminChange","value","setFieldValue","user_get_data","distributor_list","DistributorChange","dealer_list","DealerChange","useEffect","onFinish","values","resetFields","parentFunction","gutter","title","className","layout","size","sm","md","lg","Item","label","name","onChange","allowClear","showSearch","optionFilterProp","Array","isArray","map","admin","role_id","id","distributor","dealer","length","subdealer","htmlType","selectedSupplierId","setselectedSupplierId","supplierOptions","setSupplierOptions","selectedMakeId","setselectedMakeId","makeOptions","setMakeOptions","selectedModelId","setselectedModelId","modelOptions","setModelOptions","fetchSupplierOptions","fetchMakeOptions","fetchModelOptions","supplier_id","device_make_id","device_model_id","device_imei_no","uid","ccid","response","status","errorData","hasOwnProperty","get","success","error","rules","required","placeholder","roleID","filterOption","input","option","children","toLowerCase","indexOf","supplier","supplier_name","disabled","make","device_make","model","device_model","align","span","wrap","shape","initialValue","Device","deviceList","setDeviceList","selectedRowKeys","setSelectedRowKeys","isCreateVisible","setIsCreateVisible","isEditVisible","setIsEditVisible","isAssignVisible","setIsAssignVisible","editdata","setEditData","assigndata","setAssignData","loadDevices","processedData","item","handleAssignClick","record","tableColumns","dataIndex","render","_","style","cursor","onClick","handleEditClick","EditOutlined","rowSelection","key","rows","mobileFlex","prefix","SearchOutlined","icon","PlusOutlined","ghost","bordered","columns","dataSource","rowKey","preserveSelectedRowKeys","ref","React","AntdIcon","_objectSpread","EditOutlinedSvg","displayName","Col","Row"],"sourceRoot":""}