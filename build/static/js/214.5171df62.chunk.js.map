{"version":3,"file":"static/js/214.5171df62.chunk.js","mappings":"mHAEMA,E,QAAOC,EAAOC,KAAI,YAAwE,IAAtEC,EAAqE,EAArEA,eAAgBC,EAAqD,EAArDA,WAAYC,EAAyC,EAAzCA,cAAeC,EAA0B,EAA1BA,IAAKC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,OAE5EC,EAAY,CACjBC,QAAS,OACTP,eAAgBA,EAChBC,WAAYA,EACZE,IAAoB,kBAARA,EAAP,UAA6BA,EAA7B,MAAuCA,GAe7C,OAZID,IACHI,EAAUJ,cAAgBA,GAGvBE,IACHE,EAAUF,QAAUA,GAGjBC,IACHC,EAAUD,OAASA,IAGb,UAAIC,EACX,IAED,K,+CC1BME,EAAAA,WAAAA,SAAAA,KAAAA,EAAAA,EAAAA,GAAAA,KAAAA,EAAAA,CAoNJ,OApNIA,EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,CAAAA,CAAAA,IAAAA,iBAAAA,MAOL,SAAsBC,GACrB,IAAIC,EAAWD,EAAKE,MAAM,UAAY,GACtC,QAASD,EAASE,SAAW,KAAOF,EAASG,OAAS,KAAKC,aAC3D,GAOF,0BACC,SAAoBC,EAASC,GAC5B,GAAID,EAAQC,OAASA,EAClB,OAAOD,EAEV,IAAIE,EACJ,IAAK,IAAIC,KAAKH,EACb,GAAIA,EAAQI,eAAeD,IAA4B,kBAAfH,EAAQG,KAC/CD,EAAQG,KAAKC,aAAaN,EAAQG,GAAIF,IAErC,OAAOC,EAIV,OAAOA,CACP,GAMF,8BACC,SAAwBK,GACvB,IAAIA,EACH,MAAO,OAER,IACMC,EAGqBC,SAAUC,EAHjBH,GAG4BI,UAAU,EAAE,GAAG,IAFzDC,EAGN,SAAgBC,GAAI,OAAOJ,SAAUC,EAAOG,GAAIF,UAAU,EAAE,GAAG,GAAI,CAHpDG,CAAOP,GAChBQ,EAGN,SAAgBF,GAAI,OAAOJ,SAAUC,EAAOG,GAAIF,UAAU,EAAE,GAAG,GAAI,CAHrDK,CAAOT,GAIrB,SAASG,EAAOG,GAAI,MAAwB,MAAhBA,EAAEI,OAAO,GAAcJ,EAAEF,UAAU,EAAE,GAAGE,CAAE,CAEtE,OAD6B,IAAPL,EAAwB,IAATI,EAAyB,IAARG,GAAgB,IARpD,IAUV,OAEA,OAER,GAOF,wBACC,SAAkBG,EAAOC,GACxB,IAAIC,EAAIX,SAASS,EAAMP,UAAU,EAAE,GAAG,IAClCU,EAAIZ,SAASS,EAAMP,UAAU,EAAE,GAAG,IAClCW,EAAIb,SAASS,EAAMP,UAAU,EAAE,GAAG,IACtCS,EAAIX,SAASW,GAAK,IAAMD,GAAW,KAInCE,GAHAA,EAAIZ,SAASY,GAAK,IAAMF,GAAW,MAG5B,IAAKE,EAAE,IACdC,GAHAA,EAAIb,SAASa,GAAK,IAAMH,GAAW,MAG5B,IAAKG,EAAE,IACd,IAAMC,EAAiC,KAHvCH,EAAKA,EAAE,IAAKA,EAAE,KAGCI,SAAS,IAAIC,OAAhB,WAAoCL,EAAEI,SAAS,KAAQJ,EAAEI,SAAS,IACxEE,EAAiC,IAA1BL,EAAEG,SAAS,IAAIC,OAAhB,WAAoCJ,EAAEG,SAAS,KAAQH,EAAEG,SAAS,IACxEG,EAAiC,IAA1BL,EAAEE,SAAS,IAAIC,OAAhB,WAAoCH,EAAEE,SAAS,KAAQF,EAAEE,SAAS,IAC9E,MAAM,IAAN,OAAWD,GAAX,OAAgBG,GAAhB,OAAqBC,EACrB,GAMF,uBACC,SAAiBC,GAChB,IAAMC,EAAO,SAAAC,GAAG,OAAKA,EAAIC,QAAQ,cAAc,GAA/B,EACVC,EAAUJ,EAAKjB,UAAUiB,EAAKK,QAAQ,MAAMC,MAAM,KACvDC,EAAI1B,SAASoB,EAAKG,EAAQ,GAAGrB,UAAU,IAAK,IAC5CyB,EAAI3B,SAASoB,EAAKG,EAAQ,IAAK,IAC/BK,EAAI5B,SAASoB,EAAKG,EAAQ,IAAK,IAC/BM,EAAIC,WAAWV,EAAKG,EAAQ,GAAGrB,UAAU,EAAGqB,EAAQ,GAAGP,OAAS,KAAKe,QAAQ,GACvEC,EAAW,CACjBN,EAAEX,SAAS,IACXY,EAAEZ,SAAS,IACXa,EAAEb,SAAS,IACXkB,KAAKC,MAAU,IAAJL,GAASd,SAAS,IAAIb,UAAU,EAAG,IAQ/C,OALA8B,EAASG,SAAQ,SAAUC,EAAMC,GACZ,IAAhBD,EAAKpB,SACRgB,EAASK,GAAK,IAAMD,EAErB,IACK,IAAN,OAAYJ,EAASM,KAAK,IAC1B,GAQF,wBACC,SAAkBC,EAAQC,EAAUC,GACnC,OAAIF,EAAS,EACLC,EAEJD,EAAS,EACLE,EAED,IACP,GAQF,6BACC,SAAuBZ,EAAGD,EAAGc,GAC5B,MAAqB,kBAAXb,EAAEa,IAAuC,kBAAXd,EAAEc,GAClCb,EAAEa,GAAOd,EAAEc,GAGE,kBAAXb,EAAEa,IAAuC,kBAAXd,EAAEc,IACzCb,EAAIA,EAAEa,GAAKC,gBACXf,EAAIA,EAAEc,GAAKC,gBACK,EAAIf,EAAIC,EAAI,EAAI,OAHjC,CAMA,GAQF,yBACC,SAAmBe,EAAMF,EAAKG,GAC7B,IAAIC,EAAOF,EAIX,OAHGA,IACFE,EAAOF,EAAKG,QAAO,SAAAC,GAAI,OAAIA,EAAKN,KAASG,CAAlB,KAEjBC,CACP,GAQF,4BACC,SAAsBF,EAAMF,EAAKG,GAChC,IAAIC,EAAOF,EAIX,OAHGA,IACFE,EAAOF,EAAKG,QAAO,SAAAC,GAAI,OAAIA,EAAKN,KAASG,CAAlB,KAEjBC,CACP,GAOF,4BACC,SAAsBF,EAAMK,GAY3B,OADAL,EAAOA,EAAKG,QAAO,SAAAF,GAAK,OAVL,SAACG,GACnB,IAAK,IAAIN,KAAOM,EACf,GAAiB,MAAbA,EAAKN,KAG2E,IAAhFM,EAAKN,GAAK3B,WAAWzB,cAAckC,QAAQyB,EAAMlC,WAAWzB,eAC/D,OAAO,CAGT,CAC2B4D,CAAWL,EAAf,GAExB,GAMF,2BACC,SAAqBM,GACpB,IAAIC,EAAc,GAClB,IAAK,IAAMV,KAAOS,EAAS,CAC1B,GAAIA,EAAQxD,eAAe+C,GACVS,EAAQT,IAEvBU,EAAYC,KAAKX,EAGnB,CACD,OAAOU,CACP,OApNIpE,GAuNN,K,kQCtMQsE,EAAWC,EAAAA,EAAXD,OACKE,EAAO,WAAO,IAAD,QACxB,EAAeC,EAAAA,EAAKC,UAAbC,GAAP,eACA,GAAwCC,EAAAA,EAAAA,UAAS,IAAjD,eACA,GADA,WAC8CA,EAAAA,EAAAA,UAAS,KAAvD,eAAwBC,GAAxB,WACA,GAAwBD,EAAAA,EAAAA,WAAS,GAAjC,eAAOE,EAAP,KAAaC,EAAb,KAEA,GAAkCH,EAAAA,EAAAA,UAAS,IAA3C,eAAOI,EAAP,KAAkBC,EAAlB,KACA,GAA0CL,EAAAA,EAAAA,UAAS,IAAnD,eAAOM,EAAP,KAAsBC,EAAtB,KAEA,GAAgCP,EAAAA,EAAAA,UAAS,IAAzC,eAAOQ,EAAP,KAAiBC,EAAjB,KACA,GAA4CT,EAAAA,EAAAA,YAA5C,eAAOU,EAAP,KAAuBC,EAAvB,KACA,GAAsCX,EAAAA,EAAAA,UAAS,IAA/C,eAAOY,EAAP,KAAoBC,GAApB,KACA,IAAsCb,EAAAA,EAAAA,UACpCc,aAAaC,QAAQ,SAAW,IADlC,iBAAOC,GAAP,MAAoBC,GAApB,MAIMC,GAAmB,SAACC,EAAMC,EAASC,GACvCC,EAAAA,EAAaH,GAAM,CACjBC,QAAAA,EACAC,YAAAA,GAEH,GAEDE,EAAAA,EAAAA,YAAU,WACRN,GAAeO,KAChB,GAAE,IACH,IAGMC,GAAU,WACdtB,GAAQ,EACT,EAKKqB,GAAO,WACX,OAAOV,aAAaC,QAAQ,OAC7B,EAcKW,GAZGZ,aAAaC,QAAQ,YAaxBY,GAVGb,aAAaC,QAAQ,kBAWxBa,GARGd,aAAaC,QAAQ,aASxBc,GANGf,aAAaC,QAAQ,gBAOxBe,GAtBGhB,aAAaC,QAAQ,MAuBxBgB,GAAUP,KAzDQ,SAqHTQ,KArHS,oCAqHxB,6GAEU9C,EAAO,CAAE+C,QAASH,GAAYC,QAASA,IAFjD,SAG2BG,EAAAA,GAAIC,KAAK,mBAAoBjD,GAHxD,QAGUkD,EAHV,QAKiBlD,MAAQmD,MAAMC,QAAQF,EAASlD,KAAKA,OACzCqD,EAAgBH,EAASlD,KAAKA,KAAKsD,KAAI,SAACpD,GAAD,MAAW,CACtDqD,GAAIrD,EAAKqD,GACTC,WAAYtD,EAAKsD,WACjBC,aAAcvD,EAAKuD,aACnBC,aAAcxD,EAAKwD,aACnBC,YAAazD,EAAKyD,YAClBC,YAAa1D,EAAK0D,YAClBzH,KAAM+D,EAAK/D,KACX0H,YAAa3D,EAAK2D,YARyB,IAW7CC,QAAQC,IAAIV,GACZlC,EAAakC,GACbhC,EAAiBgC,IAEjBS,QAAQE,MAAM,kCArBpB,gDAwBIF,QAAQE,MAAM,wBAAd,MAxBJ,0DArHwB,uBAkJxB3B,EAAAA,EAAAA,YAAU,YAlJc,yCAwFxB,kHAE2BW,EAAAA,GAAIiB,IAAI,QAFnC,QAEUf,EAFV,QAGiBlD,KAAKkE,QAChBvC,GAAeuB,EAASlD,KAAKA,MAE7B8D,QAAQE,MAAM,kCANpB,gDASIF,QAAQE,MAAM,4BAAd,MATJ,0DAxFwB,sBAmJtBG,GAnJsB,yCAqGxB,kGACQnE,EAAO,CAAE+C,QAASH,GAAYC,QAASA,IAD/C,kBAI2BG,EAAAA,GAAIC,KAAK,kBAAmBjD,GAJvD,OAIUkD,EAJV,OAKIY,QAAQC,IAAIb,GACRA,EAASlD,KAAKkE,QAChB3C,EAAY2B,EAASlD,KAAKA,MAE1B8D,QAAQE,MAAM,kCATpB,gDAYIF,QAAQE,MAAM,wBAAd,MAZJ,0DArGwB,sBAoJtBI,GACAtB,IACD,GAAE,IA6CH,OACE,iCACE,UAAC,IAAD,CAAMuB,MAAM,SAAZ,WACE,UAAC,IAAD,CACE1I,WAAW,SACXD,eAAe,gBACf4I,YAAY,EAHd,WAKE,UAAC,IAAD,CAAMC,UAAU,OAAOD,YAAY,EAAnC,WACE,gBAAKC,UAAU,eAAf,UACE,SAAC,IAAD,CACEC,YAAY,SACZC,QAAQ,SAAC,IAAD,IACRC,SAAU,SAACC,GAAD,OArBP,SAACA,GAChB,IAAM5E,EAAQ4E,EAAEC,cAAc7E,MACxB8E,EAAcF,EAAEC,cAAc7E,MAAQmB,EAAYE,EAClDpB,EAAO8E,EAAAA,EAAMC,eAAeF,EAAa9E,GAC/CoB,EAAanB,GACbe,EAAmB,GACpB,CAe8BiE,CAASL,EAAhB,OAId,gBAAKJ,UAAU,YAED,GAAfzC,KACC,gBAAKyC,UAAU,OAAf,UACE,SAAC,KAAD,CACEtC,KAAK,UACLgD,MAAM,SAAC,IAAD,IACNC,QAjMK,WACjBjE,GAAQ,EACT,EAgMakE,OAAK,EAJP,SAKC,qBAMP,gBAAKZ,UAAU,mBAAf,UACE,SAAC,IAAD,CACEa,UAAQ,EACRC,QA1EW,CACnB,CACEhB,MAAO,aACPiB,UAAW,cAEb,CACEjB,MAAO,eACPiB,UAAW,gBAEb,CACEjB,MAAO,eACPiB,UAAW,gBAEb,CACEjB,MAAO,cACPiB,UAAW,eAEb,CACEjB,MAAO,cACPiB,UAAW,eAEb,CACEjB,MAAO,eACPiB,UAAW,eAEb,CACEjB,MAAO,OACPiB,UAAW,SAgDLC,WAAYrE,EACZsE,OAAO,aAKb,SAAC,IAAD,CAAQC,UAAU,OAAOC,UAAU,EAAOnD,QAASA,GAASvB,KAAMA,EAAlE,UACE,iBAAKuD,UAAU,YAAf,WACE,wBAAI,gBACJ,UAAC,IAAD,CACEpI,KAAK,mBACLwJ,SAvLI,gDAAG,WAAOC,GAAP,uFACTC,GADS,kBAEVD,GAFU,IAGbpD,SAAAA,GACAC,eAAAA,GACAC,UAAAA,GACAC,aAAAA,GACAC,WAAAA,GACAC,QAAAA,KARa,kBAYPG,EAAAA,GAAIC,KAAK,QAAS4C,GAZX,OAabhF,EAAKiF,cACL9D,GAAiB,UAAW,QAAS,6BACrCc,KACAP,KAhBa,kDAkBT,KAAMW,UAAsC,MAA1B,KAAMA,SAAS6C,SAC7BC,EAAY,KAAM9C,SAASlD,KACjCgC,GAAiB,QAAS,QAASgE,EAAU9D,SACzC8D,EAAU9D,SAAwC,kBAAtB8D,EAAU9D,UAClC+D,EAAmBD,EAAU9D,QACnCF,GAAiB,QAAS,QAASiE,KAvB1B,2DAAH,uBAwLJC,OAAO,WACPrF,KAAMA,EAJR,WAME,SAAC,IAAKsF,KAAN,CACEC,MAAM,OACNjK,KAAK,UACLkK,MAAO,CAAC,CAAEC,UAAU,EAAMpE,QAAS,uBAHrC,UAKE,SAAC,IAAD,CACEqE,YAAU,EACVC,YAAU,EACVC,iBAAiB,WACjB1G,MAAOwB,EACPmF,aAAc,SAACvG,EAAOwG,GAAR,OACZA,EAAOC,SAAS/G,cAAcnB,QAAQyB,EAAMN,gBAC5C,CAFY,EALhB,SAUGsD,MAAMC,QAAQ9B,GACbA,EAASgC,KAAI,SAACuD,GAAD,OACX,SAACrG,EAAD,CAAsBT,MAAO8G,EAAKtD,GAAlC,SACGsD,EAAK1K,MADK0K,EAAKtD,GADP,KAMb,SAAC/C,EAAD,CAAQT,MAAM,UAAd,SAAwB,oBAK9B,SAAC,IAAKoG,KAAN,CACEC,MAAM,aACNjK,KAAK,gBACLkK,MAAO,CAAC,CAAEC,UAAU,EAAMpE,QAAS,6BAHrC,UAKE,UAAC,IAAD,YACE,SAAC1B,EAAD,CAAQT,MAAM,IAAd,SAAkB,eAClB,SAACS,EAAD,CAAQT,MAAM,IAAd,SAAkB,yBAItB,SAAC,IAAKoG,KAAN,CACEC,MAAM,OACNjK,KAAK,UACLkK,MAAO,CAAC,CAAEC,UAAU,EAAMpE,QAAS,uBAHrC,UAKE,SAAC,IAAD,CACEqE,YAAU,EACVE,iBAAiB,WACjBD,YAAU,EACV9B,SA7Ia,SAACoC,GAC1BrF,EAAkBqF,EACnB,EA4Ia/G,MAAOyB,EACPkF,aAAc,SAACvG,EAAOwG,GAAR,OACZA,EAAOC,SAAS/G,cAAcnB,QAAQyB,EAAMN,gBAC5C,CAFY,EANhB,SAWGsD,MAAMC,QAAQ1B,GACbA,EAAY4B,KAAI,SAACyD,GAAD,OACd,SAACvG,EAAD,CAAsBT,MAAOgH,EAAKxD,GAAlC,SACGwD,EAAKrD,aAAe,QAAUqD,EAAKpD,aADzBoD,EAAKxD,GADJ,KAMhB,SAAC/C,EAAD,CAAQT,MAAM,UAAd,SAAwB,oBAK9B,SAAC,IAAKoG,KAAN,CACEC,MAAM,SACNjK,KAAK,cACLkK,MAAO,CAAC,CAAEC,UAAU,EAAMpE,QAAS,wBAHrC,UAKE,SAAC,IAAD,CAAOD,KAAK,SAAS+E,IAAK,SAG5B,SAAC,IAAKb,KAAN,WACE,SAAC,KAAD,CAAQlE,KAAK,UAAUgF,SAAS,SAAhC,SAAyC,qBAStD,EACD,W","sources":["components/shared-components/Flex/index.js","utils/index.js","views/app-views/points/index.js"],"sourcesContent":["import styled from '@emotion/styled';\r\n\r\nconst Flex = styled.div(({justifyContent, alignItems, flexDirection, gap, padding, margin}) => {\r\n\r\n\tconst baseStyle = {\r\n\t\tdisplay: 'flex',\r\n\t\tjustifyContent: justifyContent,\r\n\t\talignItems: alignItems,\r\n\t\tgap: typeof gap === 'number' ? `${gap}px` : gap,\r\n\t}\r\n\r\n\tif (flexDirection) {\r\n\t\tbaseStyle.flexDirection = flexDirection\r\n\t}\r\n\r\n\tif (padding) {\r\n\t\tbaseStyle.padding = padding\r\n\t}\r\n\r\n\tif (margin) {\r\n\t\tbaseStyle.margin = margin\r\n\t}\r\n\r\n\treturn {...baseStyle}\r\n})\r\n\r\nexport default Flex\r\n","class Utils {\r\n\r\n\t/**\r\n\t * Get first character from first & last sentences of a username\r\n\t * @param {String} name - Username\r\n\t * @return {String} 2 characters string\r\n\t */\r\n\tstatic getNameInitial(name) {\r\n\t\tlet initials = name.match(/\\b\\w/g) || [];\r\n\t\treturn ((initials.shift() || '') + (initials.pop() || '')).toUpperCase();\r\n\t}\r\n\r\n\t/**\r\n\t * Get current path related object from Navigation Tree\r\n\t * @param {Array} navTree - Navigation Tree from directory 'configs/NavigationConfig'\r\n\t * @param {String} path - Location path you looking for e.g '/app/dashboards/analytic'\r\n\t * @return {Object} object that contained the path string\r\n\t */\r\n\tstatic getRouteInfo(navTree, path) {\r\n\t\tif( navTree.path === path ){\r\n\t\t  \treturn navTree;\r\n\t\t}\r\n\t\tlet route; \r\n\t\tfor (let p in navTree) {\r\n\t\t\tif( navTree.hasOwnProperty(p) && typeof navTree[p] === 'object' ) {\r\n\t\t\t\troute = this.getRouteInfo(navTree[p], path);\r\n\t\t\t\tif(route){\r\n\t\t\t\t\treturn route;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn route;\r\n\t}\t\r\n\r\n\t/**\r\n\t * Get accessible color contrast\r\n\t * @param {String} hex - Hex color code e.g '#3e82f7'\r\n\t * @return {String} 'dark' or 'light'\r\n\t */\r\n\tstatic getColorContrast(hex){\r\n\t\tif(!hex) {\r\n\t\t\treturn 'dark'\r\n\t\t}\r\n\t\tconst threshold = 130;\r\n\t\tconst hRed = hexToR(hex);\r\n\t\tconst hGreen = hexToG(hex);\r\n\t\tconst hBlue = hexToB(hex);\r\n\t\tfunction hexToR(h) {return parseInt((cutHex(h)).substring(0,2),16)}\r\n\t\tfunction hexToG(h) {return parseInt((cutHex(h)).substring(2,4),16)}\r\n\t\tfunction hexToB(h) {return parseInt((cutHex(h)).substring(4,6),16)}\r\n\t\tfunction cutHex(h) {return (h.charAt(0) === '#') ? h.substring(1,7):h}\r\n\t\tconst cBrightness = ((hRed * 299) + (hGreen * 587) + (hBlue * 114)) / 1000;\r\n\t\tif (cBrightness > threshold){\r\n\t\t\treturn 'dark'\r\n\t\t} else { \r\n\t\t\treturn 'light'\r\n\t\t}\t\r\n\t}\r\n\r\n\t/**\r\n\t * Darken or lighten a hex color \r\n\t * @param {String} color - Hex color code e.g '#3e82f7'\r\n\t * @param {Number} percent - Percentage -100 to 100, positive for lighten, negative for darken\r\n\t * @return {String} Darken or lighten color \r\n\t */\r\n\tstatic shadeColor(color, percent) {\r\n\t\tlet R = parseInt(color.substring(1,3),16);\r\n\t\tlet G = parseInt(color.substring(3,5),16);\r\n\t\tlet B = parseInt(color.substring(5,7),16);\r\n\t\tR = parseInt(R * (100 + percent) / 100);\r\n\t\tG = parseInt(G * (100 + percent) / 100);\r\n\t\tB = parseInt(B * (100 + percent) / 100);\r\n\t\tR = (R<255)?R:255;  \r\n\t\tG = (G<255)?G:255;  \r\n\t\tB = (B<255)?B:255;  \r\n\t\tconst RR = ((R.toString(16).length === 1) ? `0${R.toString(16)}` : R.toString(16));\r\n\t\tconst GG = ((G.toString(16).length === 1) ? `0${G.toString(16)}` : G.toString(16));\r\n\t\tconst BB = ((B.toString(16).length === 1) ? `0${B.toString(16)}` : B.toString(16));\r\n\t\treturn `#${RR}${GG}${BB}`; \r\n\t}\r\n\r\n\t/**\r\n\t * Convert RGBA to HEX \r\n\t * @param {String} rgba - RGBA color code e.g 'rgba(197, 200, 198, .2)')'\r\n\t * @return {String} HEX color \r\n\t */\r\n\tstatic rgbaToHex(rgba) {\r\n\t\tconst trim = str => (str.replace(/^\\s+|\\s+$/gm,''))\r\n\t\tconst inParts = rgba.substring(rgba.indexOf(\"(\")).split(\",\"),\r\n\t\t\tr = parseInt(trim(inParts[0].substring(1)), 10),\r\n\t\t\tg = parseInt(trim(inParts[1]), 10),\r\n\t\t\tb = parseInt(trim(inParts[2]), 10),\r\n\t\t\ta = parseFloat(trim(inParts[3].substring(0, inParts[3].length - 1))).toFixed(2);\r\n\t\t\tconst outParts = [\r\n\t\t\tr.toString(16),\r\n\t\t\tg.toString(16),\r\n\t\t\tb.toString(16),\r\n\t\t\tMath.round(a * 255).toString(16).substring(0, 2)\r\n\t\t];\r\n\r\n\t\toutParts.forEach(function (part, i) {\r\n\t\t\tif (part.length === 1) {\r\n\t\t\t\toutParts[i] = '0' + part;\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn (`#${outParts.join('')}`);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns either a positive or negative \r\n\t * @param {Number} number - number value\r\n\t * @param {any} positive - value that return when positive\r\n\t * @param {any} negative - value that return when negative\r\n\t * @return {any} positive or negative value based on param\r\n\t */\r\n\tstatic getSignNum(number, positive, negative) {\r\n\t\tif (number > 0) {\r\n\t\t\treturn positive\r\n\t\t}\r\n\t\tif (number < 0) {\r\n\t\t\treturn negative\r\n\t\t}\r\n\t\treturn null\r\n\t}\r\n\r\n\t/**\r\n\t * Returns either ascending or descending value\r\n\t * @param {Object} a - antd Table sorter param a\r\n\t * @param {Object} b - antd Table sorter param b\r\n\t * @param {String} key - object key for compare\r\n\t * @return {any} a value minus b value\r\n\t */\r\n\tstatic antdTableSorter(a, b, key) {\r\n\t\tif(typeof a[key] === 'number' && typeof b[key] === 'number') {\r\n\t\t\treturn a[key] - b[key]\r\n\t\t}\r\n\r\n\t\tif(typeof a[key] === 'string' && typeof b[key] === 'string') {\r\n\t\t\ta = a[key].toLowerCase();\r\n\t\t\tb = b[key].toLowerCase();\r\n\t\t\treturn a > b ? -1 : b > a ? 1 : 0;\r\n\t\t}\r\n\t\treturn\r\n\t}\r\n\r\n\t/**\r\n\t * Filter array of object \r\n\t * @param {Array} list - array of objects that need to filter\r\n\t * @param {String} key - object key target\r\n\t * @param {any} value  - value that excluded from filter\r\n\t * @return {Array} a value minus b value\r\n\t */\r\n\tstatic filterArray(list, key, value) {\r\n\t\tlet data = list\r\n\t\tif(list) {\r\n\t\t\tdata = list.filter(item => item[key] === value)\r\n\t\t}\r\n\t\treturn data\r\n\t}\r\n\r\n\t/**\r\n\t * Remove object from array by value\r\n\t * @param {Array} list - array of objects\r\n\t * @param {String} key - object key target\r\n\t * @param {any} value  - target value\r\n\t * @return {Array} Array that removed target object\r\n\t */\r\n\tstatic deleteArrayRow(list, key, value) {\r\n\t\tlet data = list\r\n\t\tif(list) {\r\n\t\t\tdata = list.filter(item => item[key] !== value)\r\n\t\t}\r\n\t\treturn data\r\n\t}\r\n\r\n\t/**\r\n\t * Wild card search on all property of the object\r\n\t * @param {Number | String} input - any value to search\r\n\t * @param {Array} list - array for search\r\n\t * @return {Array} array of object contained keyword\r\n\t */\r\n\tstatic wildCardSearch(list, input) {\r\n\t\tconst searchText = (item) => {\r\n\t\t\tfor (let key in item) {\r\n\t\t\t\tif (item[key] == null) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif (item[key].toString().toUpperCase().indexOf(input.toString().toUpperCase()) !== -1) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\tlist = list.filter(value => searchText(value));\r\n\t\treturn list;\r\n\t}\r\n\r\n\t/**\r\n\t * Get Breakpoint\r\n\t * @param {Object} screens - Grid.useBreakpoint() from antd\r\n\t * @return {Array} array of breakpoint size\r\n\t */\r\n\tstatic getBreakPoint(screens) {\r\n\t\tlet breakpoints = []\r\n\t\tfor (const key in screens) {\r\n\t\t\tif (screens.hasOwnProperty(key)) {\r\n\t\t\t\tconst element = screens[key];\r\n\t\t\t\tif (element) {\r\n\t\t\t\t\tbreakpoints.push(key)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn breakpoints\r\n\t}\r\n}\r\n\r\nexport default Utils;","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Table,\r\n  Button,\r\n  Card,\r\n  Drawer,\r\n  Select,\r\n  Input,\r\n  Form,\r\n  notification,\r\n} from \"antd\";\r\nimport Flex from \"components/shared-components/Flex\";\r\nimport api from \"configs/apiConfig\";\r\n\r\nimport { PlusOutlined, SearchOutlined } from \"@ant-design/icons\";\r\nimport utils from \"utils\";\r\n\r\nconst { Option } = Select;\r\nexport const User = () => {\r\n  const [form] = Form.useForm();\r\n  const [selectedRows, setSelectedRows] = useState([]);\r\n  const [selectedRowKeys, setSelectedRowKeys] = useState([]);\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const [pointList, setPointList] = useState([]);\r\n  const [mainpointList, setMainPointList] = useState([]);\r\n\r\n  const [userList, setUserList] = useState([]);\r\n  const [selectedPlanId, setselectedPlanId] = useState();\r\n  const [PlanOptions, setPlanOptions] = useState([]);\r\n  const [currentRole, SetCurrentRole] = useState(\r\n    localStorage.getItem(\"role\") || \"\"\r\n  );\r\n\r\n  const openNotification = (type, message, description) => {\r\n    notification[type]({\r\n      message,\r\n      description,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    SetCurrentRole(role());\r\n  }, []);\r\n  const showDrawer = () => {\r\n    setOpen(true);\r\n  };\r\n  const onClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const user = () => {\r\n    return localStorage.getItem(\"id\");\r\n  };\r\n  const role = () => {\r\n    return localStorage.getItem(\"role\");\r\n  };\r\n  const admin = () => {\r\n    return localStorage.getItem(\"admin_id\");\r\n  };\r\n  const distributor = () => {\r\n    return localStorage.getItem(\"distributor_id\");\r\n  };\r\n  const dealer = () => {\r\n    return localStorage.getItem(\"dealer_id\");\r\n  };\r\n  const subdealer = () => {\r\n    return localStorage.getItem(\"subdealer_id\");\r\n  };\r\n\r\n  const admin_id = admin();\r\n  const distributor_id = distributor();\r\n  const dealer_id = dealer();\r\n  const subdealer_id = subdealer();\r\n  const created_by = user();\r\n  const role_id = role();\r\n\r\n  const onFinish = async (values) => {\r\n    const updatedValues = {\r\n      ...values,\r\n      admin_id,\r\n      distributor_id,\r\n      dealer_id,\r\n      subdealer_id,\r\n      created_by,\r\n      role_id,\r\n    };\r\n\r\n    try {\r\n      await api.post(\"point\", updatedValues);\r\n      form.resetFields();\r\n      openNotification(\"success\", \"Point\", \"Point Saved Successfully!\");\r\n      loadPoints();\r\n      onClose();\r\n    } catch (error) {\r\n      if (error.response && error.response.status === 403) {\r\n        const errorData = error.response.data;\r\n        openNotification(\"error\", \"Point\", errorData.message);\r\n        if (errorData.message && typeof errorData.message === \"object\") {\r\n          const validationErrors = errorData.message;\r\n          openNotification(\"error\", \"Point\", validationErrors);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  async function fetchPlanOptions() {\r\n    try {\r\n      const response = await api.get(\"plan\");\r\n      if (response.data.success) {\r\n        setPlanOptions(response.data.data);\r\n      } else {\r\n        console.error(\"API request was not successful\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching countries:\", error);\r\n    }\r\n  }\r\n\r\n  async function loadUsers() {\r\n    const data = { user_id: created_by, role_id: role_id };\r\n\r\n    try {\r\n      const response = await api.post(\"user_point_list\", data);\r\n      console.log(response);\r\n      if (response.data.success) {\r\n        setUserList(response.data.data);\r\n      } else {\r\n        console.error(\"API request was not successful\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching users:\", error);\r\n    }\r\n  }\r\n\r\n  async function loadPoints() {\r\n    try {\r\n      const data = { user_id: created_by, role_id: role_id };\r\n      const response = await api.post(\"point_stock_list\", data);\r\n\r\n      if (response.data && Array.isArray(response.data.data)) {\r\n        const processedData = response.data.data.map((item) => ({\r\n          id: item.id,\r\n          point_type: item.point_type,\r\n          package_code: item.package_code,\r\n          package_name: item.package_name,\r\n          period_name: item.period_name,\r\n          period_days: item.period_days,\r\n          name: item.name,\r\n          total_point: item.total_point,\r\n        }));\r\n\r\n        console.log(processedData);\r\n        setPointList(processedData);\r\n        setMainPointList(processedData);\r\n      } else {\r\n        console.error(\"API request was not successful\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching users:\", error);\r\n    }\r\n  }\r\n\r\n  // Inside your component\r\n  useEffect(() => {\r\n    fetchPlanOptions();\r\n    loadUsers();\r\n    loadPoints();\r\n  }, []);\r\n\r\n  const handlePlanIdChange = (countryId) => {\r\n    setselectedPlanId(countryId);\r\n  };\r\n\r\n  const tableColumns = [\r\n    {\r\n      title: \"Point Type\",\r\n      dataIndex: \"point_type\",\r\n    },\r\n    {\r\n      title: \"Package Code\",\r\n      dataIndex: \"package_code\",\r\n    },\r\n    {\r\n      title: \"Package Name\",\r\n      dataIndex: \"package_name\",\r\n    },\r\n    {\r\n      title: \"Period Name\",\r\n      dataIndex: \"period_name\",\r\n    },\r\n    {\r\n      title: \"Period Days\",\r\n      dataIndex: \"period_days\",\r\n    },\r\n    {\r\n      title: \"Total Points\",\r\n      dataIndex: \"total_point\",\r\n    },\r\n    {\r\n      title: \"Name\",\r\n      dataIndex: \"name\",\r\n    },\r\n  ];\r\n\r\n  const onSearch = (e) => {\r\n    const value = e.currentTarget.value;\r\n    const searchArray = e.currentTarget.value ? pointList : mainpointList;\r\n    const data = utils.wildCardSearch(searchArray, value);\r\n    setPointList(data);\r\n    setSelectedRowKeys([]);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Card title=\"Points\">\r\n        <Flex\r\n          alignItems=\"center\"\r\n          justifyContent=\"space-between\"\r\n          mobileFlex={false}\r\n        >\r\n          <Flex className=\"mb-1\" mobileFlex={false}>\r\n            <div className=\"mr-md-3 mb-3\">\r\n              <Input\r\n                placeholder=\"Search\"\r\n                prefix={<SearchOutlined />}\r\n                onChange={(e) => onSearch(e)}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"mb-3\"></div>\r\n          </Flex>\r\n          {currentRole != 5 && (\r\n            <div className=\"mb-3\">\r\n              <Button\r\n                type=\"primary\"\r\n                icon={<PlusOutlined />}\r\n                onClick={showDrawer}\r\n                ghost\r\n              >\r\n                Add Points\r\n              </Button>\r\n            </div>\r\n          )}\r\n        </Flex>\r\n        <div className=\"table-responsive\">\r\n          <Table\r\n            bordered\r\n            columns={tableColumns}\r\n            dataSource={pointList}\r\n            rowKey=\"id\"\r\n          />\r\n        </div>\r\n      </Card>\r\n\r\n      <Drawer placement=\"left\" closable={false} onClose={onClose} open={open}>\r\n        <div className=\"container\">\r\n          <h2>Point Info</h2>\r\n          <Form\r\n            name=\"registrationForm\"\r\n            onFinish={onFinish}\r\n            layout=\"vertical\"\r\n            form={form}\r\n          >\r\n            <Form.Item\r\n              label=\"User\"\r\n              name=\"user_id\"\r\n              rules={[{ required: true, message: \"Please Select Plan\" }]}\r\n            >\r\n              <Select\r\n                showSearch\r\n                allowClear\r\n                optionFilterProp=\"children\"\r\n                value={setUserList}\r\n                filterOption={(input, option) =>\r\n                  option.children.toLowerCase().indexOf(input.toLowerCase()) >=\r\n                  0\r\n                }\r\n              >\r\n                {Array.isArray(userList) ? (\r\n                  userList.map((user) => (\r\n                    <Option key={user.id} value={user.id}>\r\n                      {user.name}\r\n                    </Option>\r\n                  ))\r\n                ) : (\r\n                  <Option value=\"Loading\">Loading...</Option>\r\n                )}\r\n              </Select>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n              label=\"Point Type\"\r\n              name=\"point_type_id\"\r\n              rules={[{ required: true, message: \"Please Select Point Type\" }]}\r\n            >\r\n              <Select>\r\n                <Option value=\"1\">New Point</Option>\r\n                <Option value=\"2\">Recharge Point</Option>\r\n              </Select>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n              label=\"Plan\"\r\n              name=\"plan_id\"\r\n              rules={[{ required: true, message: \"Please Select Plan\" }]}\r\n            >\r\n              <Select\r\n                showSearch\r\n                optionFilterProp=\"children\"\r\n                allowClear\r\n                onChange={handlePlanIdChange}\r\n                value={selectedPlanId}\r\n                filterOption={(input, option) =>\r\n                  option.children.toLowerCase().indexOf(input.toLowerCase()) >=\r\n                  0\r\n                }\r\n              >\r\n                {Array.isArray(PlanOptions) ? (\r\n                  PlanOptions.map((plan) => (\r\n                    <Option key={plan.id} value={plan.id}>\r\n                      {plan.package_name + \"  -  \" + plan.period_name}\r\n                    </Option>\r\n                  ))\r\n                ) : (\r\n                  <Option value=\"Loading\">Loading...</Option>\r\n                )}\r\n              </Select>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n              label=\"Points\"\r\n              name=\"total_point\"\r\n              rules={[{ required: true, message: \"Please Enter Points\" }]}\r\n            >\r\n              <Input type=\"number\" max={100} />\r\n            </Form.Item>\r\n\r\n            <Form.Item>\r\n              <Button type=\"primary\" htmlType=\"submit\">\r\n                Save\r\n              </Button>\r\n            </Form.Item>\r\n          </Form>\r\n        </div>\r\n      </Drawer>\r\n    </>\r\n  );\r\n};\r\nexport default User;\r\n"],"names":["Flex","styled","div","justifyContent","alignItems","flexDirection","gap","padding","margin","baseStyle","display","Utils","name","initials","match","shift","pop","toUpperCase","navTree","path","route","p","hasOwnProperty","this","getRouteInfo","hex","hRed","parseInt","cutHex","substring","hGreen","h","hexToG","hBlue","hexToB","charAt","color","percent","R","G","B","RR","toString","length","GG","BB","rgba","trim","str","replace","inParts","indexOf","split","r","g","b","a","parseFloat","toFixed","outParts","Math","round","forEach","part","i","join","number","positive","negative","key","toLowerCase","list","value","data","filter","item","input","searchText","screens","breakpoints","push","Option","Select","User","Form","useForm","form","useState","setSelectedRowKeys","open","setOpen","pointList","setPointList","mainpointList","setMainPointList","userList","setUserList","selectedPlanId","setselectedPlanId","PlanOptions","setPlanOptions","localStorage","getItem","currentRole","SetCurrentRole","openNotification","type","message","description","notification","useEffect","role","onClose","admin_id","distributor_id","dealer_id","subdealer_id","created_by","role_id","loadPoints","user_id","api","post","response","Array","isArray","processedData","map","id","point_type","package_code","package_name","period_name","period_days","total_point","console","log","error","get","success","fetchPlanOptions","loadUsers","title","mobileFlex","className","placeholder","prefix","onChange","e","currentTarget","searchArray","utils","wildCardSearch","onSearch","icon","onClick","ghost","bordered","columns","dataIndex","dataSource","rowKey","placement","closable","onFinish","values","updatedValues","resetFields","status","errorData","validationErrors","layout","Item","label","rules","required","showSearch","allowClear","optionFilterProp","filterOption","option","children","user","countryId","plan","max","htmlType"],"sourceRoot":""}